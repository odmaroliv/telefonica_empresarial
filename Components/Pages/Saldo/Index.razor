@page "/saldo"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using System.Security.Claims
@using Microsoft.EntityFrameworkCore
@using TelefonicaEmpresaria.Data.TelefonicaEmpresarial.Data
@using TelefonicaEmpresaria.Models
@using TelefonicaEmpresaria.Services.TelefonicaEmpresarial.Services
@using TelefonicaEmpresarial.Services
@attribute [Authorize]
@inject UserManager<ApplicationUser> UserManager
@inject ISaldoService SaldoService
@inject IStripeService StripeService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject ILogger<Index> Logger
@inject IServiceScopeFactory ScopeFactory
@inject ApplicationDbContext DbContext


<div class="container mx-auto px-4 py-8">
    <h1 class="text-3xl font-bold mb-8 text-gray-800">Mi Saldo</h1>

    @if (cargando)
    {
        <div class="flex justify-center py-8">
            <div class="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
        </div>
    }
    else if (error != null)
    {
        <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-6" role="alert">
            <strong class="font-bold">Error:</strong>
            <span class="block sm:inline">@error</span>
        </div>
        <button @onclick="CargarDatos" class="mt-4 px-4 py-2 bg-blue-600 text-white text-sm font-medium rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors">
            Intentar nuevamente
        </button>
    }
    else
    {
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
            <div class="bg-gradient-to-r from-blue-500 to-blue-600 rounded-lg shadow-md p-6 text-white">
                <h2 class="text-xl font-semibold mb-2">Saldo Disponible</h2>
                <p class="text-3xl font-bold">$@saldoActual.ToString("0.00") MXN</p>
                <div class="mt-4">
                    <button @onclick="MostrarModalRecarga" class="mt-2 px-4 py-2 bg-white text-blue-600 font-medium rounded-lg hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-white transition-colors">
                        Recargar Saldo
                    </button>
                </div>
            </div>
            <div class="bg-white rounded-lg shadow-md p-6">
                <h2 class="text-xl font-semibold mb-4 text-gray-800">Información de Consumo</h2>
                <div class="space-y-2">
                    <div class="flex justify-between">
                        <span class="text-gray-600">Números activos:</span>
                        <span class="font-medium">@(numerosActivos)</span>
                    </div>
                    <div class="flex justify-between">
                        <span class="text-gray-600">Próximo cargo mensual:</span>
                        <span class="font-medium">$@proximoCargo.ToString("0.00") MXN</span>
                    </div>
                    <div class="flex justify-between">
                        <span class="text-gray-600">Promedio de consumo diario:</span>
                        <span class="font-medium">$@consumoPromedioDiario.ToString("0.00") MXN</span>
                    </div>

                    
                </div>
            </div>
        </div>

        <div class="bg-white rounded-lg shadow-md p-6 mb-8">
            <h2 class="text-xl font-semibold mb-4">Información de cargos automáticos</h2>

            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div class="p-4 border rounded-lg bg-gray-50">
                    <h3 class="font-medium text-blue-600 mb-2">Próximos cargos a tu saldo:</h3>
                    @if (proximosCargosSaldo == null || !proximosCargosSaldo.Any())
                    {
                        <p class="text-sm text-gray-500">No hay próximos cargos programados a tu saldo.</p>
                    }
                    else
                    {
                        <div class="space-y-3">
                            @foreach (var cargo in proximosCargosSaldo)
                            {
                                <div class="flex justify-between text-sm">
                                    <span>@cargo.Concepto</span>
                                    <span class="font-medium">$@cargo.Monto.ToString("0.00") MXN</span>
                                </div>
                                <div class="text-xs text-gray-500">
                                    Fecha: @cargo.Fecha.ToString("dd/MM/yyyy")
                                </div>
                            }
                        </div>
                    }
                    <div class="mt-3 text-xs text-blue-500">
                        Estos cargos se descuentan directamente de tu saldo interno.
                    </div>
                </div>

                <div class="p-4 border rounded-lg bg-gray-50">
                    <h3 class="font-medium text-green-600 mb-2">Suscripciones de recarga automática:</h3>
                    @if (suscripcionesRecarga == null || !suscripcionesRecarga.Any())
                    {
                        <p class="text-sm text-gray-500">No tienes suscripciones de recarga automática activas.</p>
                        <div class="mt-2">
                            <a href="/saldo/recarga/suscripcion" class="text-sm text-blue-600 hover:text-blue-800">Crear suscripción de recarga</a>
                        </div>
                    }
                    else
                    {
                        <div class="space-y-3">
                            @foreach (var suscripcion in suscripcionesRecarga)
                            {
                                <div class="flex justify-between text-sm">
                                    <span>Recarga mensual</span>
                                    <span class="font-medium">$@suscripcion.Monto.ToString("0.00") MXN</span>
                                </div>
                                <div class="text-xs text-gray-500">
                                    Próximo cargo: @suscripcion.ProximoCargoEstimado.ToString("dd/MM/yyyy")
                                </div>
                            }
                        </div>
                    }
                    <div class="mt-3 text-xs text-green-500">
                        Estos montos se cargan a tu tarjeta y se acreditan a tu saldo automáticamente.
                    </div>
                    <div class="mt-2">
                        <a href="/saldo/suscripciones" class="text-sm text-blue-600 hover:text-blue-800">Gestionar suscripciones</a>
                    </div>
                </div>
            </div>

            <div class="mt-6 px-4 py-3 bg-blue-50 rounded-lg">
                <div class="flex items-start">
                    <div class="flex-shrink-0">
                        <svg class="h-5 w-5 text-blue-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd" />
                        </svg>
                    </div>
                    <div class="ml-3">
                        <p class="text-sm text-blue-700">
                            <strong>Importante:</strong> La renovación de tus servicios se realiza automáticamente con cargo a tu saldo. Asegúrate de mantener saldo suficiente para evitar interrupciones.
                        </p>
                    </div>
                </div>
            </div>
        </div>

        <div class="bg-white rounded-lg shadow-md overflow-hidden mb-8">
            <div class="p-6 border-b">
                <h2 class="text-xl font-semibold text-gray-800">Historial de Movimientos</h2>
            </div>
            <div class="overflow-x-auto">
                @if (movimientos == null || !movimientos.Any())
                {
                    <div class="text-center py-8 text-gray-500">
                        <p>No hay movimientos registrados.</p>
                    </div>
                }
                else
                {
                    <table class="min-w-full divide-y divide-gray-200">
                        <thead class="bg-gray-50">
                            <tr>
                                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Fecha</th>
                                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Concepto</th>
                                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Tipo</th>
                                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Monto</th>
                            </tr>
                        </thead>
                        <tbody class="bg-white divide-y divide-gray-200">
                            @foreach (var movimiento in movimientos)
                            {
                                <tr>
                                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                        @movimiento.Fecha.ToLocalTime().ToString("dd/MM/yyyy HH:mm")
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                        @movimiento.Concepto
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap">
                                        @if (movimiento.TipoMovimiento == "Recarga")
                                        {
                                            <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800">
                                                Recarga
                                            </span>
                                        }
                                        else if (movimiento.TipoMovimiento == "Consumo")
                                        {
                                            <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-orange-100 text-orange-800">
                                                Consumo
                                            </span>
                                        }
                                        else
                                        {
                                            <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-blue-100 text-blue-800">
                                                @movimiento.TipoMovimiento
                                            </span>
                                        }
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap text-sm">
                                        @if (movimiento.TipoMovimiento == "Recarga")
                                        {
                                            <span class="text-green-600 font-medium">+$@movimiento.Monto.ToString("0.00")</span>
                                        }
                                        else
                                        {
                                            <span class="text-red-600 font-medium">-$@movimiento.Monto.ToString("0.00")</span>
                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
            </div>
        </div>
    }
</div>

@if (mostrarModalRecarga)
{
    <div class="fixed inset-0 bg-gray-500 bg-opacity-75 flex items-center justify-center z-50">
        <div class="bg-white rounded-lg overflow-hidden shadow-xl max-w-md w-full mx-4">
            <div class="p-6">
                <h3 class="text-lg font-medium text-gray-900 mb-4">Recargar Saldo</h3>
                <div class="mb-4">
                    <label class="block text-sm font-medium text-gray-700 mb-1">Monto a recargar (MXN)</label>
                    <div class="grid grid-cols-3 gap-2 mb-4">
                        <button @onclick="() => montoRecarga = 50" class="@(montoRecarga == 50 ? "bg-blue-100 border-blue-500" : "bg-gray-50 border-gray-200") border-2 rounded p-2 text-center hover:bg-blue-50">
                            $50
                        </button>
                        <button @onclick="() => montoRecarga = 240" class="@(montoRecarga == 240 ? "bg-blue-100 border-blue-500" : "bg-gray-50 border-gray-200") border-2 rounded p-2 text-center hover:bg-blue-50">
                            $240
                        </button>
                        <button @onclick="() => montoRecarga = 500" class="@(montoRecarga == 500 ? "bg-blue-100 border-blue-500" : "bg-gray-50 border-gray-200") border-2 rounded p-2 text-center hover:bg-blue-50">
                            $500
                        </button>
                    </div>
                    <input type="number" @bind="montoRecarga" min="50" step="10" class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500" placeholder="Monto personalizado" />
                    @if (!string.IsNullOrEmpty(errorRecarga))
                    {
                        <p class="mt-1 text-sm text-red-600">@errorRecarga</p>
                    }

                    <div class="mt-4">
                        <div class="flex items-center">
                            <input id="recarga-recurrente" type="checkbox" @bind="recargaRecurrente" class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded" />
                            <label for="recarga-recurrente" class="ml-2 block text-sm text-gray-700">
                                Recargar automáticamente este monto cada mes
                            </label>
                        </div>
                        @if (recargaRecurrente)
                        {
                            <p class="mt-1 text-xs text-gray-500">Tu tarjeta será cargada mensualmente por el monto seleccionado. Puedes cancelar en cualquier momento.</p>
                        }
                    </div>
                </div>
                <div class="mt-6 flex justify-end space-x-3">
                    <button @onclick="OcultarModalRecarga" class="px-4 py-2 bg-gray-200 text-gray-800 text-sm font-medium rounded-lg hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500 transition-colors">
                        Cancelar
                    </button>
                    <button @onclick="ProcesarRecarga" class="px-4 py-2 bg-blue-600 text-white text-sm font-medium rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors">
                        Proceder al Pago
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private ApplicationUser? user;
    private decimal saldoActual = 0;
    private List<MovimientoSaldo>? movimientos;
    private int numerosActivos = 0;
    private decimal proximoCargo = 0;
    private decimal consumoPromedioDiario = 0;
    private bool cargando = true;
    private string? error;

    // Variables para recarga
    private bool mostrarModalRecarga = false;
    private decimal montoRecarga = 50; // Cambiado de 100 a 120
    private string errorRecarga = "";
    private bool recargaRecurrente = true; 
    private List<ProximoCargoDTO> proximosCargosSaldo;
    private List<SuscripcionRecargaDTO> suscripcionesRecarga;

    [Inject]
    private AuthenticationStateProvider AuthStateProvider { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        await CargarDatos();
        await CargarProximosCargos();
        await CargarSuscripcionesRecarga();
    }

    private async Task CargarDatos()
    {
        cargando = true;
        error = null;

        try
        {
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var userClaims = authState.User;
            user = await UserManager.GetUserAsync(userClaims);
            if (user != null)
            {
                // Obtener saldo actual
                saldoActual = await SaldoService.ObtenerSaldoUsuario(user.Id);

                // Obtener historial de movimientos
                movimientos = await SaldoService.ObtenerMovimientosUsuario(user.Id, 20);

                // Cargar números activos y calcular próximo cargo
                await CargarInformacionNumeros(user.Id);

                // Calcular promedio de consumo diario (últimos 30 días)
                await CalcularConsumoPromedio(user.Id);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al cargar datos de saldo");
            error = $"Ocurrió un error al cargar tu información de saldo: {ex.Message}";
        }
        finally
        {
            cargando = false;
        }
    }

    private async Task CargarInformacionNumeros(string userId)
    {
        try
        {
            // Consulta a la base de datos para obtener números activos y calcular cargo mensual
            using var scope = ScopeFactory.CreateScope();
            var dbContext = scope.ServiceProvider.GetRequiredService<ApplicationDbContext>();

            var numeros = await dbContext.NumerosTelefonicos
                .Where(n => n.UserId == userId && n.Activo)
                .ToListAsync();

            numerosActivos = numeros.Count;

            // Calcular próximo cargo mensual
            proximoCargo = numeros.Sum(n =>
            {
                decimal costo = n.CostoMensual;
                if (n.SMSHabilitado && n.CostoSMS.HasValue)
                {
                    costo += n.CostoSMS.Value;
                }
                return costo;
            });
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al cargar información de números");
            // No mostramos error para no interrumpir toda la carga
        }
    }

    private async Task CalcularConsumoPromedio(string userId)
    {
        try
        {
            // Obtener consumos de los últimos 30 días
            using var scope = ScopeFactory.CreateScope();
            var dbContext = scope.ServiceProvider.GetRequiredService<ApplicationDbContext>();

            var fechaInicio = DateTime.UtcNow.AddDays(-30);

            var consumosRecientes = await dbContext.MovimientosSaldo
                .Where(m => m.UserId == userId &&
                       m.TipoMovimiento == "Consumo" &&
                       m.Fecha >= fechaInicio)
                .ToListAsync();

            if (consumosRecientes.Any())
            {
                var totalConsumo = consumosRecientes.Sum(m => m.Monto);
                var dias = Math.Max(1, (DateTime.UtcNow - fechaInicio).Days); // Evitar división por cero

                consumoPromedioDiario = totalConsumo / dias;
            }
            else
            {
                consumoPromedioDiario = 0;
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al calcular consumo promedio");
            // No mostramos error para no interrumpir toda la carga
        }
    }

    private void MostrarModalRecarga()
    {
        montoRecarga = 50; // Cambiado de 100 a 120
        errorRecarga = "";
        recargaRecurrente = true; // Por defecto se activa la recarga recurrente
        mostrarModalRecarga = true;
    }

    private void OcultarModalRecarga()
    {
        mostrarModalRecarga = false;
    }

    private async Task ProcesarRecarga()
    {
        if (montoRecarga < 50) // Cambiado de 50 a 120
        {
            errorRecarga = "El monto mínimo de recarga es $50 MXN";
            return;
        }

        errorRecarga = "";

        try
        {
            if (user == null)
            {
                errorRecarga = "Error: Sesión no válida";
                return;
            }

            // Verificar si el usuario tiene customerId de Stripe
            if (string.IsNullOrEmpty(user.StripeCustomerId))
            {
                user.StripeCustomerId = await StripeService.CrearClienteStripe(user);

                // Actualizar usuario en la base de datos
                await UserManager.UpdateAsync(user);
            }

            // Crear sesión de checkout para recarga
            StripeCheckoutSession session;

            if (recargaRecurrente)
            {
                // Crear una suscripción recurrente para recargas automáticas
                session = await StripeService.CrearSuscripcionRecargaSaldo(user.StripeCustomerId, montoRecarga);
            }
            else
            {
                // Crear una recarga única como antes
                session = await StripeService.CrearSesionRecarga(user.StripeCustomerId, montoRecarga);
            }

            if (session != null && !string.IsNullOrEmpty(session.Url))
            {
                // Usar la función redirectTo en lugar de window.location.href directamente
                await JSRuntime.InvokeVoidAsync("redirectTo", session.Url);
            }
            else
            {
                errorRecarga = "No se pudo crear la sesión de pago. Intente de nuevo más tarde.";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al procesar solicitud de recarga");
            errorRecarga = $"Error: {ex.Message}";
        }
    }
    private async Task CargarProximosCargos()
    {
        try
        {
            proximosCargosSaldo = new List<ProximoCargoDTO>();
            var userId = user?.Id;

            if (string.IsNullOrEmpty(userId))
                return;

            // Obtener números activos del usuario directamente de la base de datos
            var numerosActivos = await DbContext.NumerosTelefonicos
                .Where(n => n.UserId == userId && n.Activo)
                .ToListAsync();

            foreach (var numero in numerosActivos)
            {
                decimal montoRenovacion = numero.CostoMensual;
                if (numero.SMSHabilitado && numero.CostoSMS.HasValue)
                {
                    montoRenovacion += numero.CostoSMS.Value;
                }

                proximosCargosSaldo.Add(new ProximoCargoDTO
                    {
                        Concepto = $"Renovación número {FormatearNumero(numero.Numero)}",
                        Monto = montoRenovacion,
                        Fecha = numero.FechaExpiracion
                    });
            }

            // Ordenar por fecha más cercana
            proximosCargosSaldo = proximosCargosSaldo
                .OrderBy(c => c.Fecha)
                .ToList();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al cargar próximos cargos");
            proximosCargosSaldo = new List<ProximoCargoDTO>();
        }
    }

    private async Task CargarSuscripcionesRecarga()
    {
        try
        {
            suscripcionesRecarga = new List<SuscripcionRecargaDTO>();
            var userId = user?.Id;

            if (string.IsNullOrEmpty(userId))
                return;

            // Buscar suscripciones activas directamente en la tabla
            var suscripcionesActivas = await DbContext.SuscripcionesRecarga
                .Where(s => s.UserId == userId && s.Activa)
                .ToListAsync();

            // Si no hay suscripciones en la tabla, intentar con el método anterior
            if (!suscripcionesActivas.Any())
            {
                // Buscar transacciones activas de suscripción de recarga (método antiguo como respaldo)
                var transacciones = await DbContext.Transacciones
                    .Where(t => t.UserId == userId &&
                           t.Concepto.Contains("Recarga automática") &&
                           t.Status == "Completado")
                    .ToListAsync();

                foreach (var transaccion in transacciones)
                {
                    // Estimar próximo cargo como un mes después de la fecha de la transacción
                    suscripcionesRecarga.Add(new SuscripcionRecargaDTO
                        {
                            Id = transaccion.Id,
                            Monto = transaccion.Monto,
                            ProximoCargoEstimado = transaccion.Fecha.AddMonths(1)
                        });
                }
            }
            else
            {
                // Convertir las suscripciones de la tabla al DTO para mostrar
                foreach (var suscripcion in suscripcionesActivas)
                {
                    suscripcionesRecarga.Add(new SuscripcionRecargaDTO
                        {
                            Id = suscripcion.Id,
                            Monto = suscripcion.MontoMensual,
                            ProximoCargoEstimado = suscripcion.ProximaRecarga,
                            StripeSubscriptionId = suscripcion.StripeSubscriptionId  // Puedes agregar este campo al DTO
                        });
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al cargar suscripciones de recarga");
            suscripcionesRecarga = new List<SuscripcionRecargaDTO>();
        }
    }

    private string FormatearNumero(string numero)
    {
        // Simplificar para mostrar sólo los últimos dígitos
        if (string.IsNullOrEmpty(numero))
            return "";

        if (numero.Length > 8)
        {
            return $"...{numero.Substring(numero.Length - 8)}";
        }

        return numero;
    }

    public class ProximoCargoDTO
    {
        public string Concepto { get; set; }
        public decimal Monto { get; set; }
        public DateTime Fecha { get; set; }
    }

    public class SuscripcionRecargaDTO
    {
        public int Id { get; set; }
        public decimal Monto { get; set; }
        public DateTime ProximoCargoEstimado { get; set; }
        public string StripeSubscriptionId { get; set; } = string.Empty;  
    }
}

   