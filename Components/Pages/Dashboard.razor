@page "/dashboard"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using System.Security.Claims
@using TelefonicaEmpresaria.Models
@using TelefonicaEmpresaria.Services.TelefonicaEmpresarial.Services
@using TelefonicaEmpresarial.Services
@attribute [Authorize]
@inject UserManager<ApplicationUser> UserManager
@inject ITelefonicaService TelefonicaService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject ILogger<Dashboard> Logger
@inject ISaldoService SaldoService
@inject ISMSPoolService SMSPoolService

<div class="container mx-auto px-4 py-6">
    <h1 class="text-3xl font-bold mb-6 text-gray-800">Dashboard</h1>
    
    <!-- Tarjetas de resumen -->
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-5 mb-6">
        <!-- Tarjeta Saldo -->
        <div class="bg-gradient-to-r from-blue-500 to-blue-600 rounded-xl shadow-md p-5 text-white relative overflow-hidden">
            <div class="absolute right-0 bottom-0 opacity-10">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-24 w-24" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
            </div>
            <div class="relative">
                <h2 class="text-lg font-semibold mb-1">Mi Saldo</h2>
                @if (cargandoSaldo)
                {
                    <div class="animate-pulse h-6 w-24 bg-white bg-opacity-30 rounded"></div>
                }
                else if (errorSaldo != null)
                {
                    <p class="text-xs text-red-300">@errorSaldo</p>
                }
                else
                {
                    <p class="text-2xl font-bold">$@saldoActual.ToString("0.00") MXN</p>
                }
                <a href="/saldo" class="mt-3 inline-flex items-center text-sm hover:text-blue-100">
                    Gestionar <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 ml-1" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M10.293 5.293a1 1 0 011.414 0l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414-1.414L12.586 11H5a1 1 0 110-2h7.586l-2.293-2.293a1 1 0 010-1.414z" clip-rule="evenodd" />
                    </svg>
                </a>
            </div>
        </div>
        
        <!-- Tarjeta Números -->
        <div class="bg-gradient-to-r from-indigo-500 to-indigo-600 rounded-xl shadow-md p-5 text-white relative overflow-hidden">
            <div class="absolute right-0 bottom-0 opacity-10">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-24 w-24" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z" />
                </svg>
            </div>
            <div class="relative">
                <h2 class="text-lg font-semibold mb-1">Números Activos</h2>
                @if (cargando)
                {
                    <div class="animate-pulse h-6 w-16 bg-white bg-opacity-30 rounded"></div>
                }
                else
                {
                    <p class="text-2xl font-bold">@numeros?.Count(n => n.Activo)</p>
                }
                <a href="/numeros/comprar" class="mt-3 inline-flex items-center text-sm hover:text-indigo-100">
                    Comprar <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 ml-1" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M10.293 5.293a1 1 0 011.414 0l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414-1.414L12.586 11H5a1 1 0 110-2h7.586l-2.293-2.293a1 1 0 010-1.414z" clip-rule="evenodd" />
                    </svg>
                </a>
            </div>
        </div>
        
        <!-- Tarjeta Verificaciones -->
        <div class="bg-gradient-to-r from-purple-500 to-purple-600 rounded-xl shadow-md p-5 text-white relative overflow-hidden">
            <div class="absolute right-0 bottom-0 opacity-10">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-24 w-24" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z" />
                </svg>
            </div>
            <div class="relative">
                <h2 class="text-lg font-semibold mb-1">Verificaciones</h2>
                <p class="text-2xl font-bold">@verificacionesRecientes?.Count</p>
                <a href="/verificaciones" class="mt-3 inline-flex items-center text-sm hover:text-purple-100">
                    Ver todas <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 ml-1" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M10.293 5.293a1 1 0 011.414 0l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414-1.414L12.586 11H5a1 1 0 110-2h7.586l-2.293-2.293a1 1 0 010-1.414z" clip-rule="evenodd" />
                    </svg>
                </a>
            </div>
        </div>
        
        <!-- Tarjeta Llamadas -->
        <div class="bg-gradient-to-r from-green-500 to-green-600 rounded-xl shadow-md p-5 text-white relative overflow-hidden">
            <div class="absolute right-0 bottom-0 opacity-10">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-24 w-24" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z" />
                </svg>
            </div>
            <div class="relative">
                <h2 class="text-lg font-semibold mb-1">Realizar Llamada</h2>
                <p class="text-sm opacity-80 mb-2">Llama desde cualquier número</p>
                <a href="/numeros/llamar" class="mt-2 inline-flex items-center text-sm hover:text-green-100">
                    Llamar ahora <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 ml-1" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M10.293 5.293a1 1 0 011.414 0l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414-1.414L12.586 11H5a1 1 0 110-2h7.586l-2.293-2.293a1 1 0 010-1.414z" clip-rule="evenodd" />
                    </svg>
                </a>
            </div>
        </div>
    </div>
    
    @if (cargando)
    {
        <div class="flex justify-center py-8">
            <div class="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
        </div>
    }
    else if (error != null)
    {
        <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-6" role="alert">
            <strong class="font-bold">Error:</strong>
            <span class="block sm:inline">@error</span>
        </div>
        <button @onclick="CargarDatos" class="mt-4 px-4 py-2 bg-blue-600 text-white text-sm font-medium rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors">
            Intentar nuevamente
        </button>
    }
    else if (numeros == null || !numeros.Any())
    {
        <div class="bg-white rounded-xl shadow-md p-8 mb-8">
            <div class="text-center">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-16 w-16 mx-auto text-blue-500 mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z" />
                </svg>
                <h2 class="text-2xl font-semibold mb-4">¡Bienvenido a tu Dashboard!</h2>
                <p class="mb-6 text-gray-700">Aún no tienes números telefónicos empresariales. ¡Comienza adquiriendo tu primer número!</p>
                <a href="/numeros/comprar" class="inline-flex items-center px-5 py-3 bg-blue-600 text-white font-medium rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors shadow-md">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z" clip-rule="evenodd" />
                    </svg>
                    Comprar Número
                </a>
            </div>
        </div>
    }
    else
    {
        <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
            <!-- Columna izquierda principal -->
            <div class="lg:col-span-2">
                @if (numerosPendientesPago.Any())
                {
                    <div class="bg-yellow-50 border-l-4 border-yellow-400 p-4 mb-6 rounded-r-lg shadow-sm">
                        <div class="flex">
                            <div class="flex-shrink-0">
                                <svg class="h-5 w-5 text-yellow-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                                    <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd" />
                                </svg>
                            </div>
                            <div class="ml-3">
                                <p class="text-sm text-yellow-700">
                                    Tienes <strong>@numerosPendientesPago.Count()</strong> número(s) pendiente(s) de pago.
                                    <a href="#numeros-pendientes" class="font-medium underline hover:text-yellow-800">Ver detalles</a>
                                </p>
                            </div>
                        </div>
                    </div>
                }

                <div class="bg-white rounded-xl shadow-md overflow-hidden mb-6">
                    <div class="flex justify-between items-center p-6 border-b">
                        <h2 class="text-xl font-semibold text-gray-800">Mis Números Telefónicos</h2>
                        <div class="flex items-center space-x-2">
                            <div class="relative">
                                <input type="text" 
                                       placeholder="Buscar número..." 
                                       @bind-value="filtroNumeros"
                                       @bind-value:event="oninput"
                                       class="px-3 py-1 text-sm border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500" />
                                <button class="absolute right-2 top-1.5 text-gray-400 hover:text-gray-600">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                                    </svg>
                                </button>
                            </div>
                            <a href="/numeros/comprar" class="inline-flex items-center px-3 py-1.5 bg-blue-600 text-white text-sm font-medium rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" viewBox="0 0 20 20" fill="currentColor">
                                    <path fill-rule="evenodd" d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z" clip-rule="evenodd" />
                                </svg>
                                Comprar
                            </a>
                        </div>
                    </div>
                    <div class="overflow-x-auto">
                        <table class="min-w-full divide-y divide-gray-200">
                            <thead class="bg-gray-50">
                                <tr>
                                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Número</th>
                                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Redirección</th>
                                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Estado</th>
                                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">SMS</th>
                                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Expira</th>
                                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Acciones</th>
                                </tr>
                            </thead>
                            <tbody class="bg-white divide-y divide-gray-200">
                                @{
                                    var numerosFiltrados = string.IsNullOrWhiteSpace(filtroNumeros)
                                    ? numeros
                                    : numeros.Where(n => n.Numero.Contains(filtroNumeros) ||
                                    (n.NumeroRedireccion?.Contains(filtroNumeros) ?? false)).ToList();

                                    var numerosPaginados = numerosFiltrados
                                    .Skip((paginaActual - 1) * elementosPorPagina)
                                    .Take(elementosPorPagina)
                                    .ToList();

                                    totalPaginas = (int)Math.Ceiling(numerosFiltrados.Count / (double)elementosPorPagina);
                                }

                                @foreach (var numero in numerosPaginados)
                                {
                                    <tr>
                                        <td class="px-6 py-4 whitespace-nowrap">
                                            <div class="text-sm font-medium text-gray-900">@FormatearNumero(numero.Numero)</div>
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                            @numero.NumeroRedireccion
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap">
                                            @if (numero.Activo)
                                            {
                                                <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800">
                                                    Activo
                                                </span>
                                            }
                                            else if (EsNumeroPendientePago(numero))
                                            {
                                                <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-yellow-100 text-yellow-800">
                                                    Pendiente de Pago
                                                </span>
                                            }
                                            else
                                            {
                                                <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-red-100 text-red-800">
                                                    Inactivo
                                                </span>
                                            }
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap">
                                            @if (numero.SMSHabilitado)
                                            {
                                                <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-blue-100 text-blue-800">
                                                    Habilitado
                                                </span>
                                            }
                                            else
                                            {
                                                <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-gray-100 text-gray-800">
                                                    Deshabilitado
                                                </span>
                                            }
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                            @(numero.FechaExpiracion.ToString("dd/MM/yyyy"))
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                                            <div class="flex space-x-2">
                                                @if (EsNumeroPendientePago(numero))
                                                {
                                                    <button @onclick="() => CompletarPago(numero.Id)" class="text-green-600 hover:text-green-900 font-medium">Completar Pago</button>
                                                }
                                                else
                                                {
                                                    <a href="/numeros/detalle/@numero.Id" class="text-indigo-600 hover:text-indigo-900">Detalles</a>
                                                    @if (numero.Activo)
                                                    {
                                                        <a href="/numeros/editar/@numero.Id" class="text-blue-600 hover:text-blue-900">Editar</a>
                                                    }
                                                }
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>

                    <!-- Paginación -->
                    @if (totalPaginas > 1)
                    {
                        <div class="px-6 py-3 flex items-center justify-between border-t">
                            <div class="flex-1 flex justify-between sm:hidden">
                                <button @onclick="() => CambiarPagina(paginaActual - 1)" disabled="@(paginaActual <= 1)"
                                        class="relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed">
                                    Anterior
                                </button>
                                <button @onclick="() => CambiarPagina(paginaActual + 1)" disabled="@(paginaActual >= totalPaginas)"
                                        class="ml-3 relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed">
                                    Siguiente
                                </button>
                            </div>
                            <div class="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between">
                                <div>
                                    <p class="text-sm text-gray-700">
                                        Mostrando <span class="font-medium">@((paginaActual - 1) * elementosPorPagina + 1)</span> a
                                        <span class="font-medium">@Math.Min(paginaActual * elementosPorPagina, numerosFiltrados.Count)</span> de
                                        <span class="font-medium">@numerosFiltrados.Count</span> resultados
                                    </p>
                                </div>
                                <div>
                                    <nav class="relative z-0 inline-flex rounded-md shadow-sm -space-x-px" aria-label="Pagination">
                                        <button @onclick="() => CambiarPagina(paginaActual - 1)" disabled="@(paginaActual <= 1)"
                                                class="relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed">
                                            <span class="sr-only">Anterior</span>
                                            <svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                                                <path fill-rule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clip-rule="evenodd" />
                                            </svg>
                                        </button>

                                        @{
                                            var paginaInicio = Math.Max(1, paginaActual - 2);
                                            var paginaFin = Math.Min(totalPaginas, paginaInicio + 4);

                                            // Asegurar que siempre mostramos 5 páginas si hay suficientes
                                            if (paginaFin - paginaInicio < 4 && totalPaginas > 4)
                                            {
                                                paginaInicio = Math.Max(1, paginaFin - 4);
                                            }
                                        }

                                        @for (int i = paginaInicio; i <= paginaFin; i++)
                                        {
                                            var pagina = i; // Variable local para capturar el valor
                                            <button @onclick="() => CambiarPagina(pagina)"
                                                    class="relative inline-flex items-center px-4 py-2 border border-gray-300 bg-white text-sm font-medium @(pagina == paginaActual ? "text-blue-600 bg-blue-50" : "text-gray-700 hover:bg-gray-50")">
                                                @pagina
                                            </button>
                                        }

                                        <button @onclick="() => CambiarPagina(paginaActual + 1)" disabled="@(paginaActual >= totalPaginas)"
                                                class="relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed">
                                            <span class="sr-only">Siguiente</span>
                                            <svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                                                <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />
                                            </svg>
                                        </button>
                                    </nav>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>

            <!-- Columna derecha - Verificaciones y mensajes recientes -->
            <div class="lg:col-span-1 space-y-6">
                <!-- Widget de verificaciones recientes -->
                <div class="bg-white rounded-xl shadow-md overflow-hidden">
                    <div class="flex justify-between items-center p-5 border-b">
                        <h2 class="font-semibold text-gray-800">Verificaciones Recientes</h2>
                        <a href="/verificaciones" class="text-sm text-blue-600 hover:text-blue-800">Ver todas</a>
                    </div>
                    <div class="p-5">
                        @if (cargandoVerificaciones)
                        {
                            <div class="flex justify-center py-4">
                                <div class="animate-spin rounded-full h-6 w-6 border-t-2 border-b-2 border-blue-500"></div>
                            </div>
                        }
                        else if (verificacionesRecientes == null || !verificacionesRecientes.Any())
                        {
                            <div class="text-center py-4 text-gray-500">
                                <p>No hay verificaciones recientes.</p>
                                <a href="/verificaciones/nuevo" class="mt-2 inline-block text-sm text-blue-600 hover:text-blue-800">
                                    Crear verificación
                                </a>
                            </div>
                        }
                        else
                        {
                            <div class="space-y-4">
                                @foreach (var verificacion in verificacionesRecientes.Take(5))
                                {
                                    <div class="border-b border-gray-100 pb-3 last:border-b-0 last:pb-0">
                                        <div class="flex justify-between">
                                            <div class="font-medium">@verificacion.Servicio?.Nombre</div>
                                            @if (verificacion.SMSRecibido)
                                            {
                                                <span class="px-2 py-0.5 text-xs rounded-full bg-green-100 text-green-800">Recibido</span>
                                            }
                                            else
                                            {
                                                <span class="px-2 py-0.5 text-xs rounded-full bg-yellow-100 text-yellow-800">Pendiente</span>
                                            }
                                        </div>
                                        <div class="text-xs text-gray-500 mt-1">
                                            @verificacion.FechaCompra.ToString("dd/MM/yyyy HH:mm")
                                        </div>
                                        @if (!string.IsNullOrEmpty(verificacion.CodigoRecibido))
                                        {
                                            <div class="mt-2 bg-gray-50 rounded p-2 font-mono text-sm">
                                                Código: @verificacion.CodigoRecibido
                                            </div>
                                        }
                                    </div>
                                }
                            </div>
                        }
                    </div>
                </div>

                <!-- Widget de actividad reciente -->
                <div class="bg-white rounded-xl shadow-md overflow-hidden">
                    <div class="flex justify-between items-center p-5 border-b">
                        <h2 class="font-semibold text-gray-800">Actividad Reciente</h2>
                    </div>
                    <div class="p-5">
                        @if (cargandoMovimientos)
                        {
                            <div class="flex justify-center py-4">
                                <div class="animate-spin rounded-full h-6 w-6 border-t-2 border-b-2 border-blue-500"></div>
                            </div>
                        }
                        else if (movimientosSaldo == null || !movimientosSaldo.Any())
                        {
                            <div class="text-center py-4 text-gray-500">
                                <p>No hay actividad reciente.</p>
                            </div>
                        }
                        else
                        {
                            <div class="space-y-4">
                                @foreach (var movimiento in movimientosSaldo.Take(5))
                                {
                                    <div class="flex items-start border-b border-gray-100 pb-3 last:border-b-0 last:pb-0">
                                        <div class="flex-shrink-0 mt-1">
                                            @if (movimiento.TipoMovimiento == "Recarga")
                                            {
                                                <div class="h-8 w-8 rounded-full bg-green-100 flex items-center justify-center">
                                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-green-600" viewBox="0 0 20 20" fill="currentColor">
                                                        <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-11a1 1 0 10-2 0v2H7a1 1 0 100 2h2v2a1 1 0 102 0v-2h2a1 1 0 100-2h-2V7z" clip-rule="evenodd" />
                                                    </svg>
                                                </div>
                                            }
                                            else
                                            {
                                                <div class="h-8 w-8 rounded-full bg-orange-100 flex items-center justify-center">
                                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-orange-600" viewBox="0 0 20 20" fill="currentColor">
                                                        <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-13a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V5z" clip-rule="evenodd" />
                                                    </svg>
                                                </div>
                                            }
                                        </div>
                                        <div class="ml-3 flex-1">
                                            <div class="text-sm font-medium">@movimiento.Concepto</div>
                                            <div class="text-xs text-gray-500 mt-1">
                                                @movimiento.Fecha.ToString("dd/MM/yyyy HH:mm")
                                            </div>
                                        </div>
                                        <div class="ml-3">
                                            @if (movimiento.TipoMovimiento == "Recarga")
                                            {
                                                <span class="text-green-600 font-medium">+$@movimiento.Monto.ToString("0.00")</span>
                                            }
                                            else
                                            {
                                                <span class="text-red-600 font-medium">-$@movimiento.Monto.ToString("0.00")</span>
                                            }
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private ApplicationUser? user;
    private List<NumeroTelefonico>? numeros;
    private List<NumeroTelefonico> numerosPendientesPago = new List<NumeroTelefonico>();
    private List<SMSPoolNumero>? verificacionesRecientes;
    private List<MovimientoSaldo>? movimientosSaldo;

    private bool cargando = true;
    private bool cargandoSaldo = true;
    private bool cargandoVerificaciones = true;
    private bool cargandoMovimientos = true;

    private string? error;
    private string? errorSaldo;

    private decimal saldoActual = 0;

    // Filtrado y paginación
    private string filtroNumeros = "";
    private int paginaActual = 1;
    private int elementosPorPagina = 5;
    private int totalPaginas = 1;

    [Inject]
    private AuthenticationStateProvider AuthStateProvider { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        await CargarDatos();
        await CargarSaldoUsuario();
        await CargarVerificacionesRecientes();
        await CargarMovimientosSaldo();
    }

    private void CambiarPagina(int pagina)
    {
        if (pagina < 1 || pagina > totalPaginas)
            return;

        paginaActual = pagina;
        StateHasChanged();
    }

    private async Task CargarSaldoUsuario()
    {
        cargandoSaldo = true;
        errorSaldo = null;

        try
        {
            if (user != null)
            {
                saldoActual = await SaldoService.ObtenerSaldoUsuario(user.Id);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al cargar saldo del usuario");
            errorSaldo = "No se pudo cargar tu información de saldo.";
        }
        finally
        {
            cargandoSaldo = false;
        }
    }

    private async Task CargarVerificacionesRecientes()
    {
        cargandoVerificaciones = true;

        try
        {
            if (user != null)
            {
                verificacionesRecientes = await SMSPoolService.ObtenerNumerosPorUsuario(user.Id);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al cargar verificaciones recientes");
        }
        finally
        {
            cargandoVerificaciones = false;
        }
    }

    private async Task CargarMovimientosSaldo()
    {
        cargandoMovimientos = true;

        try
        {
            if (user != null)
            {
                movimientosSaldo = await SaldoService.ObtenerMovimientosUsuario(user.Id);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al cargar movimientos de saldo");
        }
        finally
        {
            cargandoMovimientos = false;
        }
    }

    private async Task CargarDatos()
    {
        cargando = true;
        error = null;

        try
        {
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var userClaims = authState.User;
            user = await UserManager.GetUserAsync(userClaims);
            if (user != null)
            {
                Logger.LogInformation($"Cargando números para usuario {user.Id}");
                numeros = await TelefonicaService.ObtenerNumerosPorUsuario(user.Id);

                // Identificar números pendientes de pago (inactivos con PlivoUuid "pendiente")
                numerosPendientesPago = numeros
                    .Where(n => !n.Activo && n.PlivoUuid == "pendiente")
                    .ToList();

                Logger.LogInformation($"Se cargaron {numeros.Count} números, {numerosPendientesPago.Count} pendientes de pago");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al cargar datos del dashboard");
            error = $"Ocurrió un error al cargar tus números: {ex.Message}";
        }
        finally
        {
            cargando = false;
        }
    }

    private bool EsNumeroPendientePago(NumeroTelefonico numero)
    {
        return !numero.Activo && numero.PlivoUuid == "pendiente";
    }

    private async Task CompletarPago(int numeroId)
    {
        try
        {
            Logger.LogInformation($"Completando pago para número ID {numeroId}");

            // Obtener URL de pago
            var urlPago = await TelefonicaService.ObtenerURLPago(numeroId);

            if (!string.IsNullOrEmpty(urlPago))
            {
                Logger.LogInformation($"Redirigiendo a URL de pago: {urlPago}");
                await JSRuntime.InvokeVoidAsync("redirectTo", urlPago);
            }
            else
            {
                Logger.LogWarning($"No se pudo obtener URL de pago para número ID {numeroId}");
                await JSRuntime.InvokeVoidAsync("alert", "No se pudo completar el pago. Por favor, contacte a soporte.");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error al completar pago para número ID {numeroId}");
            await JSRuntime.InvokeVoidAsync("alert", $"Error: {ex.Message}");
        }
    }

    private string FormatearNumero(string numero)
    {
        if (string.IsNullOrEmpty(numero))
            return "";

        // Formato para distintos países
        if (numero.StartsWith("+52") && numero.Length >= 13)
        {
            // Formato México: +52 (XXX) XXX-XXXX
            return $"+52 ({numero.Substring(3, 3)}) {numero.Substring(6, 3)}-{numero.Substring(9)}";
        }
        else if (numero.StartsWith("+1") && numero.Length >= 12)
        {
            // Formato US/Canadá: +1 (XXX) XXX-XXXX
            return $"+1 ({numero.Substring(2, 3)}) {numero.Substring(5, 3)}-{numero.Substring(8)}";
        }

        return numero; // Si no encaja en ningún formato, retornar tal cual
    }
}