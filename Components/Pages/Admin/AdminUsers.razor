@page "/admin/usuarios"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using Microsoft.EntityFrameworkCore.Infrastructure
@using TelefonicaEmpresaria.Data.TelefonicaEmpresarial.Data
@using TelefonicaEmpresaria.Models
@using TelefonicaEmpresaria.Services
@attribute [Authorize(Roles = "Admin")]
@inject ApplicationDbContext DbContext
@inject UserManager<ApplicationUser> UserManager
@inject INotificationService NotificationService

<div class="bg-white rounded-lg shadow-md">
    <div class="p-6 border-b flex justify-between items-center">
        <h4 class="text-2xl font-semibold text-gray-800">Gestión de Usuarios</h4>
        <div class="relative flex-grow max-w-md ml-4">
            <input 
                type="text" 
                placeholder="Buscar usuario..." 
                class="w-full pl-4 pr-10 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                @bind="searchTerm" 
                @bind:event="oninput" 
                @onkeyup="HandleSearch" 
            />
            <button 
                class="absolute right-2 top-1/2 transform -translate-y-1/2 text-gray-500 hover:text-gray-700" 
                @onclick="ResetFilters"
            >
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" />
                </svg>
            </button>
        </div>
    </div>
    
    <div class="p-6">
        @if (loading)
        {
            <div class="flex justify-center my-12">
                <div class="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-blue-500"></div>
            </div>
        }
        else if (filteredUsers.Count == 0)
        {
            <div class="bg-blue-50 border-l-4 border-blue-400 p-4">
                <p class="text-blue-700">No se encontraron usuarios que coincidan con los criterios de búsqueda.</p>
            </div>
        }
        else
        {
            <div class="overflow-x-auto">
                <table class="w-full divide-y divide-gray-200">
                    <thead class="bg-gray-50">
                        <tr>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                <button 
                                    class="flex items-center hover:text-gray-700" 
                                    @onclick="() => SortBy(nameof(ApplicationUser.Email))"
                                >
                                    Email 
                                    @if (sortField == nameof(ApplicationUser.Email))
                                    {
                                        <span class="ml-2">@(sortAscending ? "↑" : "↓")</span>
                                    }
                                </button>
                            </th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                <button 
                                    class="flex items-center hover:text-gray-700" 
                                    @onclick="() => SortBy(nameof(ApplicationUser.Nombre))"
                                >
                                    Nombre 
                                    @if (sortField == nameof(ApplicationUser.Nombre))
                                    {
                                        <span class="ml-2">@(sortAscending ? "↑" : "↓")</span>
                                    }
                                </button>
                            </th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                <button 
                                    class="flex items-center hover:text-gray-700" 
                                    @onclick="() => SortBy(nameof(ApplicationUser.Apellidos))"
                                >
                                    Apellido 
                                    @if (sortField == nameof(ApplicationUser.Apellidos))
                                    {
                                        <span class="ml-2">@(sortAscending ? "↑" : "↓")</span>
                                    }
                                </button>
                            </th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                <button 
                                    class="flex items-center hover:text-gray-700" 
                                    @onclick="() => SortBy(nameof(ApplicationUser.PhoneNumber))"
                                >
                                    Teléfono 
                                    @if (sortField == nameof(ApplicationUser.PhoneNumber))
                                    {
                                        <span class="ml-2">@(sortAscending ? "↑" : "↓")</span>
                                    }
                                </button>
                            </th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Email Confirmado
                            </th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Saldo
                            </th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Acciones
                            </th>
                        </tr>
                    </thead>
                    <tbody class="bg-white divide-y divide-gray-200">
                        @foreach (var user in filteredUsers.Skip((currentPage - 1) * pageSize).Take(pageSize))
                        {
                            <tr>
                                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                                    @user.Email
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                    @user.Nombre
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                    @user.Apellidos
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                    @user.PhoneNumber
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <span class="@(user.EmailConfirmed ? "bg-green-100 text-green-800" : "bg-yellow-100 text-yellow-800") px-2 py-1 rounded-full text-xs">
                                        @(user.EmailConfirmed ? "Confirmado" : "Pendiente")
                                    </span>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                    @(userSaldos.TryGetValue(user.Id, out var saldo) ? $"${saldo.Saldo:F2}" : "$0.00")
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                                    <div class="flex space-x-2">
                                        <button 
                                            @onclick="() => EditUser(user)" 
                                            class="text-blue-600 hover:text-blue-900"
                                            title="Editar"
                                        >
                                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                                <path d="M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793zM11.379 5.793L3 14.172V17h2.828l8.38-8.379-2.83-2.828z" />
                                            </svg>
                                        </button>
                                        <button 
                                            @onclick="() => ViewUserDetails(user)" 
                                            class="text-green-600 hover:text-green-900"
                                            title="Ver Detalles"
                                        >
                                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                                <path d="M10 12a2 2 0 100-4 2 2 0 000 4z" />
                                                <path fill-rule="evenodd" d="M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z" clip-rule="evenodd" />
                                            </svg>
                                        </button>
                                        <button 
                                            @onclick="() => ManageSaldo(user)" 
                                            class="text-yellow-600 hover:text-yellow-900"
                                            title="Gestionar Saldo"
                                        >
                                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                                <path d="M4 4a2 2 0 00-2 2v1h16V6a2 2 0 00-2-2H4z" />
                                                <path fill-rule="evenodd" d="M18 9H2v5a2 2 0 002 2h12a2 2 0 002-2V9zM4 13a1 1 0 011-1h1a1 1 0 110 2H5a1 1 0 01-1-1zm5-1a1 1 0 100 2h1a1 1 0 100-2H9z" clip-rule="evenodd" />
                                            </svg>
                                        </button>
                                        <button 
                                            @onclick="() => ConfirmDeleteUser(user)" 
                                            class="text-red-600 hover:text-red-900"
                                            title="Eliminar"
                                        >
                                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                                <path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd" />
                                            </svg>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <div class="flex justify-between items-center mt-6">
                <div class="text-sm text-gray-600">
                    Mostrando @(((currentPage - 1) * pageSize) + 1) a @Math.Min(currentPage * pageSize, filteredUsers.Count) de @filteredUsers.Count usuarios
                </div>
                <div class="flex space-x-2">
                    <button 
                        @onclick="PreviousPage" 
                        disabled="@(currentPage == 1)"
                        class="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
                    >
                        Anterior
                    </button>
                    
                    @for (int i = startPage; i <= endPage; i++)
                    {
                        var pageNumber = i;
                        <button 
                            @onclick="() => GoToPage(pageNumber)"
                            class="px-4 py-2 text-sm font-medium @(pageNumber == currentPage ? "bg-blue-600 text-white" : "text-gray-700 bg-white border border-gray-300") rounded-md hover:bg-gray-50"
                        >
                            @pageNumber
                        </button>
                    }
                    
                    <button 
                        @onclick="NextPage" 
                        disabled="@(currentPage == totalPages)"
                        class="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
                    >
                        Siguiente
                    </button>
                </div>
            </div>
        }
    </div>
</div>

<!-- Modal de Edición de Usuario -->
@if (showEditModal && editUser != null)
{
    <div class="fixed inset-0 z-50 flex items-center justify-center overflow-x-hidden overflow-y-auto outline-none focus:outline-none">
        <div class="relative w-full max-w-lg mx-auto my-6">
            <div class="relative flex flex-col w-full bg-white border-0 rounded-lg shadow-lg outline-none focus:outline-none">
                <div class="flex items-start justify-between p-5 border-b border-solid rounded-t border-blueGray-200">
                    <h5 class="text-xl font-semibold text-gray-800">Editar Usuario</h5>
                    <button @onclick="CloseModals" class="text-gray-500 hover:text-gray-700">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                        </svg>
                    </button>
                </div>
                <div class="relative p-6 flex-auto">
                    <div class="space-y-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-1">Email</label>
                            <input type="text" disabled class="w-full px-3 py-2 border border-gray-300 rounded-md text-gray-400 bg-gray-100" value="@editUser.Email" />
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-1">Nombre</label>
                            <input type="text" @bind="editUser.Nombre" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" />
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-1">Apellidos</label>
                            <input type="text" @bind="editUser.Apellidos" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" />
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-1">Teléfono</label>
                            <input type="text" @bind="editUser.PhoneNumber" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" />
                        </div>
                        <div class="flex items-center">
                            <input type="checkbox" id="emailConfirmed" @bind="editUser.EmailConfirmed" class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded" />
                            <label for="emailConfirmed" class="ml-2 block text-sm text-gray-700">Email Confirmado</label>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-1">Roles</label>
                            <div class="space-y-2">
                                @foreach (var role in availableRoles)
                                {
                                    <div class="flex items-center">
                                        <input type="checkbox" id="@($"role_{role}")" checked="@(userRoles.ContainsKey(editUser.Id) && userRoles[editUser.Id].Contains(role))" @onchange="(e) => ToggleRole(role, (bool)e.Value)" class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded" />
                                        <label for="@($"role_{role}")" class="ml-2 block text-sm text-gray-700">@role</label>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
                <div class="flex items-center justify-end p-6 border-t border-solid rounded-b border-blueGray-200">
                    <button @onclick="CloseModals" class="px-4 py-2 mr-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50">
                        Cancelar
                    </button>
                    <button @onclick="SaveUser" class="px-4 py-2 text-sm font-medium text-white bg-blue-600 border border-transparent rounded-md hover:bg-blue-700">
                        Guardar Cambios
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div class="fixed inset-0 z-40 bg-black opacity-25"></div>
}

<!-- Modal de Detalles de Usuario -->
@if (showDetailsModal && selectedUser != null)
{
    <div class="fixed inset-0 z-50 flex items-center justify-center overflow-x-hidden overflow-y-auto outline-none focus:outline-none">
        <div class="relative w-full max-w-lg mx-auto my-6">
            <div class="relative flex flex-col w-full bg-white border-0 rounded-lg shadow-lg outline-none focus:outline-none">
                <div class="flex items-start justify-between p-5 border-b border-solid rounded-t border-blueGray-200">
                    <h5 class="text-xl font-semibold text-gray-800">Detalles del Usuario</h5>
                    <button @onclick="CloseModals" class="text-gray-500 hover:text-gray-700">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                        </svg>
                    </button>
                </div>
                <div class="relative p-6 flex-auto">
                    <div class="space-y-4">
                        <div>
                            <strong class="text-gray-700">Email:</strong>
                            <p class="text-gray-600">@selectedUser.Email</p>
                        </div>
                        <div>
                            <strong class="text-gray-700">Nombre:</strong>
                            <p class="text-gray-600">@selectedUser.Nombre @selectedUser.Apellidos</p>
                        </div>
                        <div>
                            <strong class="text-gray-700">Teléfono:</strong>
                            <p class="text-gray-600">@(string.IsNullOrEmpty(selectedUser.PhoneNumber) ? "No especificado" : selectedUser.PhoneNumber)</p>
                        </div>
                        <div>
                            <strong class="text-gray-700">Email Confirmado:</strong>
                            <p class="text-gray-600">@(selectedUser.EmailConfirmed ? "Sí" : "No")</p>
                        </div>
                        <div>
                            <strong class="text-gray-700">Roles:</strong>
                            @if (userRoles.ContainsKey(selectedUser.Id) && userRoles[selectedUser.Id].Any())
                            {
                                <div class="flex flex-wrap gap-2 mt-1">
                                    @foreach (var role in userRoles[selectedUser.Id])
                                    {
                                        <span class="bg-blue-100 text-blue-800 px-2 py-1 rounded-full text-xs">@role</span>
                                    }
                                </div>
                            }
                            else
                            {
                                <p class="text-gray-600">Ninguno</p>
                            }
                        </div>
                        <div>
                            <strong class="text-gray-700">Saldo:</strong>
                            <p class="text-gray-600">@(userSaldos.TryGetValue(selectedUser.Id, out var saldo) ? $"${saldo.Saldo:F2}" : "$0.00")</p>
                        </div>
                        <div>
                            <strong class="text-gray-700">Números Telefónicos:</strong>
                            @if (selectedUser.NumerosTelefonicos != null && selectedUser.NumerosTelefonicos.Any())
                            {
                                <div class="mt-2 overflow-x-auto">
                                    <table class="w-full text-sm">
                                        <thead>
                                            <tr class="bg-gray-50">
                                                <th class="px-4 py-2 text-left">Número</th>
                                                <th class="px-4 py-2 text-left">Estado</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var numero in selectedUser.NumerosTelefonicos)
                                            {
                                                <tr class="border-t">
                                                    <td class="px-4 py-2">@numero.Numero</td>
                                                    <td class="px-4 py-2">
                                                        <span class="@(numero.Activo ? "bg-green-100 text-green-800" : "bg-red-100 text-red-800") px-2 py-1 rounded-full text-xs">
                                                            @(numero.Activo ? "Activo" : "Inactivo")
                                                        </span>
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            }
                            else
                            {
                                <p class="text-gray-600">No tiene números telefónicos</p>
                            }
                        </div>
                    </div>
                </div>
                <div class="flex items-center justify-end p-6 border-t border-solid rounded-b border-blueGray-200">
                    <button @onclick="CloseModals" class="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50">
                        Cerrar
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div class="fixed inset-0 z-40 bg-black opacity-25"></div>
}

<!-- Modal de Gestión de Saldo -->
@if (showSaldoModal && selectedUser != null)
{
    <div class="fixed inset-0 z-50 flex items-center justify-center overflow-x-hidden overflow-y-auto outline-none focus:outline-none">
        <div class="relative w-full max-w-md mx-auto my-6">
            <div class="relative flex flex-col w-full bg-white border-0 rounded-lg shadow-lg outline-none focus:outline-none">
                <div class="flex items-start justify-between p-5 border-b border-solid rounded-t border-blueGray-200">
                    <h5 class="text-xl font-semibold text-gray-800">Gestionar Saldo</h5>
                    <button @onclick="CloseModals" class="text-gray-500 hover:text-gray-700">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                        </svg>
                    </button>
                </div>
                <div class="relative p-6 flex-auto">
                    <div class="space-y-4">
                        <div>
                            <strong class="text-gray-700">Usuario:</strong>
                            <p class="text-gray-600">@selectedUser.Email</p>
                        </div>
                        <div>
                            <strong class="text-gray-700">Saldo Actual:</strong>
                            <p class="text-gray-600">@(userSaldos.TryGetValue(selectedUser.Id, out var saldo) ? $"${saldo.Saldo:F2}" : "$0.00")</p>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-1">Operación</label>
                            <select @bind="saldoOperation" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                                <option value="add">Agregar Saldo</option>
                                <option value="subtract">Restar Saldo</option>
                                <option value="set">Establecer Saldo</option>
                            </select>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-1">Monto ($)</label>
                            <input type="number" min="0" step="0.01" @bind="saldoAmount" class="w-full px-3 py-2 border @(saldoAmountError ? "border-red-500" : "border-gray-300") rounded-md focus:outline-none focus:ring-2 @(saldoAmountError ? "focus:ring-red-500" : "focus:ring-blue-500")" />
                            @if (saldoAmountError)
                            {
                                <p class="mt-1 text-sm text-red-500">El monto debe ser mayor a cero.</p>
                            }
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-1">Motivo</label>
                            <textarea @bind="saldoMotivo" class="w-full px-3 py-2 border @(saldoMotivoError ? "border-red-500" : "border-gray-300") rounded-md focus:outline-none focus:ring-2 @(saldoMotivoError ? "focus:ring-red-500" : "focus:ring-blue-500")" rows="3"></textarea>
                            @if (saldoMotivoError)
                            {
                                <p class="mt-1 text-sm text-red-500">El motivo es obligatorio.</p>
                            }
                        </div>
                    </div>
                </div>
                <div class="flex items-center justify-end p-6 border-t border-solid rounded-b border-blueGray-200">
                    <button @onclick="CloseModals" class="px-4 py-2 mr-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50">
                        Cancelar
                    </button>
                    <button @onclick="ApplySaldoChange" class="px-4 py-2 text-sm font-medium text-white bg-blue-600 border border-transparent rounded-md hover:bg-blue-700">
                        Aplicar Cambio
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div class="fixed inset-0 z-40 bg-black opacity-25"></div>
}

<!-- Modal de Confirmación de Eliminación -->
@if (showDeleteModal && selectedUser != null)
{
    <div class="fixed inset-0 z-50 flex items-center justify-center overflow-x-hidden overflow-y-auto outline-none focus:outline-none">
        <div class="relative w-full max-w-md mx-auto my-6">
            <div class="relative flex flex-col w-full bg-white border-0 rounded-lg shadow-lg outline-none focus:outline-none">
                <div class="flex items-start justify-between p-5 border-b border-solid rounded-t border-blueGray-200">
                    <h5 class="text-xl font-semibold text-gray-800">Confirmar Eliminación</h5>
                    <button @onclick="CloseModals" class="text-gray-500 hover:text-gray-700">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                        </svg>
                    </button>
                </div>
                <div class="relative p-6 flex-auto">
                    <div class="bg-red-50 border-l-4 border-red-400 p-4 mb-4">
                        <div class="flex items-start">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-red-400 mr-3" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd" />
                            </svg>
                            <p class="text-red-700">
                                Esta acción no se puede deshacer. Se eliminarán todos los datos asociados al usuario.
                            </p>
                        </div>
                    </div>
                    <p class="text-gray-600">
                        ¿Está seguro de que desea eliminar al usuario <strong>@selectedUser.Email</strong>?
                    </p>
                </div>
                <div class="flex items-center justify-end p-6 border-t border-solid rounded-b border-blueGray-200">
                    <button @onclick="CloseModals" class="px-4 py-2 mr-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50">
                        Cancelar
                    </button>
                    <button @onclick="DeleteUser" class="px-4 py-2 text-sm font-medium text-white bg-red-600 border border-transparent rounded-md hover:bg-red-700">
                        Eliminar
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div class="fixed inset-0 z-40 bg-black opacity-25"></div>
}


@code {
    private List<ApplicationUser> allUsers = new();
    private List<ApplicationUser> filteredUsers = new();
    private Dictionary<string, List<string>> userRoles = new();
    private Dictionary<string, SaldoCuenta> userSaldos = new();
    private bool loading = true;
    private string searchTerm = "";
    private List<string> availableRoles = new();

    // Paginación
    private int pageSize = 10;
    private int currentPage = 1;
    private int totalPages => (int)Math.Ceiling(filteredUsers.Count / (double)pageSize);
    private int displayPageCount = 5;
    private int startPage => Math.Max(1, currentPage - (displayPageCount / 2));
    private int endPage => Math.Min(totalPages, startPage + displayPageCount - 1);

    // Ordenamiento
    private string sortField = nameof(ApplicationUser.Email);
    private bool sortAscending = true;

    // Modales
    private bool showEditModal = false;
    private bool showDetailsModal = false;
    private bool showSaldoModal = false;
    private bool showDeleteModal = false;
    private ApplicationUser selectedUser;
    private ApplicationUser editUser;

    // Gestión de saldo
    private string saldoOperation = "add";
    private decimal saldoAmount = 0;
    private string saldoMotivo = "";
    private bool saldoAmountError = false;
    private bool saldoMotivoError = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        loading = true;

        // Cargar usuarios
        allUsers = await DbContext.Users
            .Include(u => u.NumerosTelefonicos)
            .Include(u => u.Transacciones)
            .ToListAsync();

        // Cargar roles
        var roleManager = DbContext.GetService<RoleManager<IdentityRole>>();
        availableRoles = await roleManager.Roles.Select(r => r.Name).ToListAsync();

        // Cargar roles de usuarios
        userRoles.Clear();
        foreach (var user in allUsers)
        {
            var roles = await UserManager.GetRolesAsync(user);
            userRoles[user.Id] = roles.ToList();
        }

        var saldos = await DbContext.SaldosCuenta.ToListAsync();
        userSaldos = saldos
            .GroupBy(s => s.UserId)
            .ToDictionary(g => g.Key, g => g.OrderByDescending(s => s.UltimaActualizacion).First());

        // Aplicar filtros iniciales
        ApplyFilters();

        loading = false;
    }

    private void ApplyFilters()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredUsers = allUsers;
        }
        else
        {
            var search = searchTerm.Trim().ToLower();
            filteredUsers = allUsers.Where(u =>
                (u.Email?.ToLower().Contains(search) ?? false) ||
                (u.Nombre?.ToLower().Contains(search) ?? false) ||
                (u.Apellidos?.ToLower().Contains(search) ?? false) ||
                (u.PhoneNumber?.ToLower().Contains(search) ?? false)
                // || (u.CompanyName?.ToLower().Contains(search) ?? false)
            ).ToList();
        }

        ApplySorting();
    }

    private void ApplySorting()
    {
        filteredUsers = sortField switch
        {
            nameof(ApplicationUser.Email) => sortAscending
                ? filteredUsers.OrderBy(u => u.Email).ToList()
                : filteredUsers.OrderByDescending(u => u.Email).ToList(),

            nameof(ApplicationUser.Nombre) => sortAscending
                 ? filteredUsers.OrderBy(u => u.Nombre).ToList()
                 : filteredUsers.OrderByDescending(u => u.Nombre).ToList(),

            nameof(ApplicationUser.Apellidos) => sortAscending
                ? filteredUsers.OrderBy(u => u.Apellidos).ToList()
                : filteredUsers.OrderByDescending(u => u.Apellidos).ToList(),

            nameof(ApplicationUser.PhoneNumber) => sortAscending
                ? filteredUsers.OrderBy(u => u.PhoneNumber).ToList()
                : filteredUsers.OrderByDescending(u => u.PhoneNumber).ToList(),

            _ => filteredUsers
        };

        currentPage = 1;
    }

    private void SortBy(string field)
    {
        if (sortField == field)
        {
            sortAscending = !sortAscending;
        }
        else
        {
            sortField = field;
            sortAscending = true;
        }

        ApplySorting();
    }

    private string GetSortIcon(string field)
    {
        if (sortField != field)
            return "";

        return sortAscending ? "↑" : "↓";
    }

    private void HandleSearch(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" || string.IsNullOrEmpty(searchTerm))
        {
            ApplyFilters();
        }
    }

    private void ResetFilters()
    {
        searchTerm = "";
        ApplyFilters();
    }

    private void PreviousPage()
    {
        if (currentPage > 1)
            currentPage--;
    }

    private void NextPage()
    {
        if (currentPage < totalPages)
            currentPage++;
    }

    private void GoToPage(int page)
    {
        currentPage = page;
    }

    private void CloseModals()
    {
        showEditModal = false;
        showDetailsModal = false;
        showSaldoModal = false;
        showDeleteModal = false;
    }

    private void EditUser(ApplicationUser user)
    {
        selectedUser = user;
        editUser = new ApplicationUser
            {
                Id = user.Id,
                Email = user.Email,
                Nombre = user.Nombre,
                Apellidos = user.Apellidos,
                PhoneNumber = user.PhoneNumber,
                //CompanyName = user.CompanyName,
                EmailConfirmed = user.EmailConfirmed
            };

        showEditModal = true;
    }

    private void ViewUserDetails(ApplicationUser user)
    {
        selectedUser = user;
        showDetailsModal = true;
    }

    private void ManageSaldo(ApplicationUser user)
    {
        selectedUser = user;
        saldoOperation = "add";
        saldoAmount = 0;
        saldoMotivo = "";
        saldoAmountError = false;
        saldoMotivoError = false;
        showSaldoModal = true;
    }

    private void ConfirmDeleteUser(ApplicationUser user)
    {
        selectedUser = user;
        showDeleteModal = true;
    }

    private async Task SaveUser()
    {
        if (editUser == null || selectedUser == null)
            return;

        try
        {
            var user = await DbContext.Users.FindAsync(editUser.Id);
            if (user == null)
                return;

            user.Nombre = editUser.Nombre;
            user.Apellidos = editUser.Apellidos;
            user.PhoneNumber = editUser.PhoneNumber;
            // user.CompanyName = editUser.CompanyName;
            user.EmailConfirmed = editUser.EmailConfirmed;

            await DbContext.SaveChangesAsync();

            // Actualizar usuario en las listas locales
            var index = allUsers.FindIndex(u => u.Id == user.Id);
            if (index >= 0)
            {
                allUsers[index].Nombre = user.Nombre;
                allUsers[index].Apellidos = user.Apellidos;
                allUsers[index].PhoneNumber = user.PhoneNumber;
                // allUsers[index].CompanyName = user.CompanyName;
                allUsers[index].EmailConfirmed = user.EmailConfirmed;
            }

            NotificationService.ShowNotification("Usuario actualizado correctamente");
            showEditModal = false;
            ApplyFilters();
        }
        catch (Exception ex)
        {
            NotificationService.ShowNotification($"Error al actualizar usuario: {ex.Message}");
        }
    }

    private void ToggleRole(string role, bool isChecked)
    {
        if (editUser == null)
            return;

        if (!userRoles.ContainsKey(editUser.Id))
            userRoles[editUser.Id] = new List<string>();

        if (isChecked && !userRoles[editUser.Id].Contains(role))
        {
            userRoles[editUser.Id].Add(role);
        }
        else if (!isChecked && userRoles[editUser.Id].Contains(role))
        {
            userRoles[editUser.Id].Remove(role);
        }
    }

    private async Task ApplySaldoChange()
    {
        saldoAmountError = saldoAmount <= 0;
        saldoMotivoError = string.IsNullOrWhiteSpace(saldoMotivo);

        if (saldoAmountError || saldoMotivoError || selectedUser == null)
            return;

        try
        {
            var saldo = await DbContext.SaldosCuenta.FirstOrDefaultAsync(s => s.UserId == selectedUser.Id);
            if (saldo == null)
            {
                saldo = new SaldoCuenta
                    {
                        UserId = selectedUser.Id,
                        Saldo = 0,
                        UltimaActualizacion = DateTime.UtcNow
                    };
                DbContext.SaldosCuenta.Add(saldo);
            }

            decimal oldSaldo = saldo.Saldo;

            switch (saldoOperation)
            {
                case "add":
                    saldo.Saldo += saldoAmount;
                    break;
                case "subtract":
                    saldo.Saldo = Math.Max(0, saldo.Saldo - saldoAmount);
                    break;
                case "set":
                    saldo.Saldo = saldoAmount;
                    break;
            }

            saldo.UltimaActualizacion = DateTime.UtcNow;

            // Registrar movimiento
            var movimiento = new MovimientoSaldo
                {
                    UserId = selectedUser.Id,
                    Monto = saldoOperation == "subtract" ? -saldoAmount : (saldoOperation == "add" ? saldoAmount : saldo.Saldo - oldSaldo),
                    Concepto = saldoMotivo,
                    Fecha = DateTime.UtcNow,
                    
                };

            DbContext.MovimientosSaldo.Add(movimiento);
            await DbContext.SaveChangesAsync();

            userSaldos[selectedUser.Id] = saldo;

            NotificationService.ShowNotification($"Saldo actualizado correctamente: ${saldo.Saldo:F2}");
            showSaldoModal = false;
        }
        catch (Exception ex)
        {
            NotificationService.ShowNotification($"Error al actualizar saldo: {ex.Message}");
        }
    }

    private async Task DeleteUser()
    {
        if (selectedUser == null)
            return;

        try
        {
            var user = await DbContext.Users.FindAsync(selectedUser.Id);
            if (user == null)
                return;

            DbContext.Users.Remove(user);
            await DbContext.SaveChangesAsync();

            // Actualizar listas locales
            allUsers.RemoveAll(u => u.Id == user.Id);
            ApplyFilters();

            NotificationService.ShowNotification("Usuario eliminado correctamente");
            showDeleteModal = false;
        }
        catch (Exception ex)
        {
            NotificationService.ShowNotification($"Error al eliminar usuario: {ex.Message}");
        }
    }

    private string GetStatusBadgeClass(string status)
    {
        return status?.ToLower() switch
        {
            "completada" => "bg-green-100 text-green-800",
            "pendiente" => "bg-yellow-100 text-yellow-800",
            "fallida" => "bg-red-100 text-red-800",
            "reembolsada" => "bg-blue-100 text-blue-800",
            _ => "bg-gray-100 text-gray-800"
        };
    }
}