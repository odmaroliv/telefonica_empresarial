@page "/numeros/comprar"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Microsoft.AspNetCore.Identity
@using System.Security.Claims
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.Extensions.Configuration
@using TelefonicaEmpresaria.Models
@using TelefonicaEmpresaria.Services.TelefonicaEmpresarial.Services
@using TelefonicaEmpresarial.Services
@attribute [Authorize]
@inject UserManager<ApplicationUser> UserManager
@inject ITelefonicaService TelefonicaService
@inject IStripeService StripeService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject ILogger<Comprar> Logger
@inject ProtectedSessionStorage SessionStorage
@inject ISaldoService SaldoService
@inject IRequisitosRegulatoriosService RequisitosService
@inject IConfiguration _configuration


<div class="container mx-auto px-4 py-8">
    <div class="flex items-center mb-8">
        <button @onclick="Regresar" class="mr-3 text-gray-500 hover:text-gray-700">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
            </svg>
        </button>
        <h1 class="text-3xl font-bold text-gray-800">Comprar Número Telefónico</h1>
    </div>

    <div class="bg-white rounded-lg shadow-md p-6 mb-8">
        <div class="mb-8">
            <h2 class="text-xl font-semibold mb-4">Selecciona país y número telefónico</h2>

            @if (isOnlyUsa)
            {
                @* Por ahora solo contamos con numeros en Estados Unidos. *@
                <div class="bg-yellow-50 border-l-4 border-yellow-400 p-4 mb-8">
                    <div class="flex">
                    <div class="flex-shrink-0">
                        <svg class="h-5 w-5 text-yellow-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd" />
                        </svg>
                    </div>
                    <div class="ml-3">
                        <p class="text-sm text-yellow-700">
                            <strong>Por ahora solo contamos con numeros en Estados Unidos.</strong>
                        </p>
                    </div>
                </div>
            </div>
            }

            <!-- Selector de país -->
            <div class="mb-6">
                <label class="block text-sm font-medium text-gray-700 mb-1">País</label>
                <div class="relative">
                    <select @bind="paisSeleccionado" @bind:after="CambiarPais" class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 bg-white">
                        @if (paisesDisponibles == null || !paisesDisponibles.Any())
                        {
                            <option value="MX">México</option>
                            <option value="US">Estados Unidos</option>
                        }
                        else
                        {
                            @foreach (var pais in paisesDisponibles)
                            {
                                <option value="@pais.Codigo">@pais.Nombre (@pais.Prefijo)</option>
                            }
                        }
                    </select>
                    <div class="absolute inset-y-0 right-0 flex items-center px-2 pointer-events-none">
                        <svg class="h-5 w-5 text-gray-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
                        </svg>
                    </div>
                </div>
            </div>
            
            @if (cargandoNumeros)
            {
                <div class="flex justify-center py-8">
                    <div class="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
                </div>
            }
            else if (error != null)
            {
                <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4" role="alert">
                    <strong class="font-bold">Error:</strong>
                    <span class="block sm:inline">@error</span>
                </div>
                <div class="text-center py-4">
                    <button @onclick="CargarNumeros" class="px-4 py-2 bg-blue-600 text-white text-sm font-medium rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors">
                        Intentar nuevamente
                    </button>
                </div>
            }
            else if (numerosDisponibles == null || !numerosDisponibles.Any())
            {
                <div class="text-center py-8">
                    <p class="text-gray-500 mb-4">No hay números disponibles para el país seleccionado.</p>
                    <button @onclick="CargarNumeros" class="px-4 py-2 bg-blue-600 text-white text-sm font-medium rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors">
                        Intentar nuevamente
                    </button>
                </div>
            }
            else
            {
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mb-6">
                    @foreach (var numero in numerosDisponibles)
                    {
                        <div @onclick="() => SeleccionarNumero(numero)" 
                             class="@(numeroSeleccionado?.Number == numero.Number ? "bg-blue-50 border-blue-500" : "bg-gray-50 border-gray-200") 
                                    border-2 rounded-lg p-4 cursor-pointer hover:bg-blue-50 hover:border-blue-300 transition-colors">
                            <div class="font-bold text-lg mb-2">@FormatearNumero(numero.Number)</div>
                           @*  <div class="text-sm text-gray-600">Costo mensual: $@numero.MonthlyRentalRate.ToString("0.00") MXN</div> *@
                            <div class="mt-2 flex">
                                @if (numero.Voice)
                                {
                                    <span class="mr-2 px-2 py-1 bg-green-100 text-green-800 text-xs rounded-full">Voz</span>
                                }
                                @if (numero.SMS)
                                {
                                    <span class="px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded-full">SMS</span>
                                }
                            </div>
                            @if (numero.Country != paisSeleccionado)
                            {
                                <div class="mt-2">
                                    <span class="text-xs text-amber-600">* Número alternativo de @numero.Country</span>
                                </div>
                            }
                        </div>
                    }
                </div>

                <div class="flex justify-between">
                    <button @onclick="CargarNumeros" class="px-4 py-2 text-blue-600 bg-transparent border border-blue-600 text-sm font-medium rounded-lg hover:bg-blue-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors">
                        Cargar más números
                    </button>
                </div>
            }
        </div>

        @if (numeroSeleccionado != null)
        {
            <div class="border-t pt-6">
                <h2 class="text-xl font-semibold mb-4">Configura tu número</h2>
                <div class="mb-6">
                    <label class="block text-sm font-medium text-gray-700 mb-1">Número a redireccionar (ej. tu número personal)</label>
                    <input type="tel" @bind="numeroRedireccion" class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500" placeholder="+52 1 123 456 7890" />
                    @if (!string.IsNullOrEmpty(errorRedireccion))
                    {
                        <p class="mt-1 text-sm text-red-600">@errorRedireccion</p>
                    }
                </div>

                <div class="mb-6">
                    <div class="flex items-center">
                        <input id="sms-check" type="checkbox" @bind="habilitarSMS" class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded" />
                        <label for="sms-check" class="ml-2 block text-sm text-gray-700">
                            Habilitar recepción de SMS (para autenticación y verificación)
                        </label>
                    </div>
                    @if (habilitarSMS)
                    {
                        <p class="mt-1 text-sm text-gray-500">Cargo adicional mensual: $@costoSMS.ToString("0.00") MXN</p>
                    }
                </div>

                <div class="bg-gray-50 border border-gray-200 rounded-lg p-4 mb-6">
                    <h3 class="font-semibold text-lg mb-2">Resumen de compra</h3>
                    <div class="flex justify-between mb-2">
                        <span>Número telefónico:</span>
                        <span class="font-medium">@FormatearNumero(numeroSeleccionado.Number)</span>
                    </div>
                    <div class="flex justify-between mb-2">
                        <span>País:</span>
                        <span>@(GetNombrePais(numeroSeleccionado.Country))</span>
                    </div>
                    <div class="flex justify-between mb-2">
                        <span>Costo mensual base:</span>
                        <span>$@costoNumero.ToString("0.00") MXN</span>
                    </div>
                    @if (habilitarSMS)
                    {
                        <div class="flex justify-between mb-2">
                            <span>Costo mensual SMS:</span>
                            <span>$@costoSMS.ToString("0.00") MXN</span>
                        </div>
                    }
                    <div class="border-t border-gray-300 my-2"></div>
                    <div class="flex justify-between font-bold">
                        <span>Total mensual:</span>
                        <span>$@(habilitarSMS ? (costoNumero + costoSMS).ToString("0.00") : costoNumero.ToString("0.00")) MXN</span>
                    </div>
                    <div class="mt-2 p-2 bg-blue-50 rounded-lg">
                        <div class="flex justify-between">
                            <span>Tu saldo:</span>
                            <span class="@(saldoUsuario >= (habilitarSMS ? (costoNumero + costoSMS) : costoNumero) ? "text-green-600" : "text-red-600") font-medium">
                                $@saldoUsuario.ToString("0.00") MXN
                            </span>
                        </div>
                        @if (saldoUsuario < (habilitarSMS ? (costoNumero + costoSMS) : costoNumero))
                        {
                            <div class="mt-1 text-xs text-red-600">
                                Saldo insuficiente. <a href="/saldo" class="underline">Recargar saldo</a>
                            </div>
                        }
                    </div>
                </div>


                <div class="mt-6 flex items-center">
                    <button @onclick="ComprarNumero" 
                            class="w-full px-6 py-3 bg-blue-600 text-white font-medium rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                            disabled="@cargandoCompra">
                        @if (cargandoCompra)
                        {
                            <span class="inline-flex items-center">
                                <svg class="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                    <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                </svg>
                                Procesando...
                            </span>
                        }
                        else
                        {
                            <span>Proceder al pago</span>
                        }
                    </button>
                </div>
            </div>
        }
    </div>
</div>

@code {
    private ApplicationUser? user;
    private List<TwilioNumeroDisponible>? numerosDisponibles;
    private TwilioNumeroDisponible? numeroSeleccionado;
    private List<PaisDisponible>? paisesDisponibles;
    private string paisSeleccionado = "MX";
    private string numeroRedireccion = "";
    private bool habilitarSMS;
    private bool cargandoNumeros;
    private bool cargandoCompra;
    private bool cargandoPaises;
    private string errorRedireccion = "";
    private string? error;
    private decimal costoNumero;
    private decimal costoSMS;
    private decimal saldoUsuario = 0;
    private bool isOnlyUsa = false;

    [Inject]
    private AuthenticationStateProvider AuthStateProvider { get; set; } = default!;


    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        user = await UserManager.GetUserAsync(authState.User);

        // Obtener país de la URL (si existe)
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("pais", out var pais))
        {
            paisSeleccionado = pais;
        }

        // Cargar países disponibles
        await CargarPaises();

        // Cargar números para el país predeterminado o seleccionado
        await CargarNumeros();

        if (user != null)
        {
            saldoUsuario = await SaldoService.ObtenerSaldoUsuario(user.Id);
        }
        isOnlyUsa = _configuration.GetValue<bool>("Twilio:isOnlyUsa");


    }

    // Método auxiliar para obtener el usuario actual
    private async Task<ApplicationUser?> GetCurrentUser()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        return await UserManager.GetUserAsync(authState.User);
    }

    // Añadir script JS al final para mostrar aviso de requisitos
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("eval", @"
            window.mostrarAvisoRequisitos = function(codigoPais) {
                if (confirm('Este país requiere documentación regulatoria. ¿Desea completarla ahora?\n\nPuede continuar con la compra y completar la documentación más tarde, pero algunos países tienen restricciones si no se verifica.')) {
                    window.location.href = '/numeros/requisitos/' + codigoPais;
                }
            };
        ");
        }
    }

    private async Task CargarPaises()
    {
        cargandoPaises = true;
        try
        {
            Logger.LogInformation("Cargando países disponibles");
            
            var twService = TelefonicaService as ITwilioService;
            if (twService != null)
            {
                paisesDisponibles = await twService.ObtenerPaisesDisponibles();
                Logger.LogInformation($"Se cargaron {paisesDisponibles.Count} países");
            }
            else
            {
                // Fallback si el servicio no es ITwilioService
                Logger.LogWarning("Usando lista predeterminada de países");
                paisesDisponibles = new List<PaisDisponible>
                {
                    new PaisDisponible { Codigo = "MX", Nombre = "México", Prefijo = "+52" },
                    new PaisDisponible { Codigo = "US", Nombre = "Estados Unidos", Prefijo = "+1" }
                };
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al cargar países");
            
            // Países por defecto
            paisesDisponibles = new List<PaisDisponible>
            {
                new PaisDisponible { Codigo = "MX", Nombre = "México", Prefijo = "+52" },
                new PaisDisponible { Codigo = "US", Nombre = "Estados Unidos", Prefijo = "+1" }
            };
        }
        finally
        {
            cargandoPaises = false;
        }
    }

    private async Task CargarNumeros()
    {
        cargandoNumeros = true;
        numeroSeleccionado = null;
        error = null;
        
        try
        {
            Logger.LogInformation($"Cargando números para país {paisSeleccionado}");
            
            numerosDisponibles = await TelefonicaService.ObtenerNumerosDisponibles(paisSeleccionado, 12);
            
            Logger.LogInformation($"Se cargaron {numerosDisponibles.Count} números");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error al cargar números para {paisSeleccionado}");
            
            error = $"No pudimos cargar números: {ex.Message}";
            numerosDisponibles = new List<TwilioNumeroDisponible>();
        }
        finally
        {
            cargandoNumeros = false;
        }
    }

    private async Task CambiarPais()
    {
        Logger.LogInformation($"Cambiando país a {paisSeleccionado}");

        // Verificar si este país tiene requisitos regulatorios
        var requisitosPais = await RequisitosService.ObtenerRequisitosPorPais(paisSeleccionado);

        if (requisitosPais != null && requisitosPais.Activo)
        {
            // Verificar si el usuario ya cumple con los requisitos
            var user = await GetCurrentUser();
            if (user != null)
            {
                bool cumpleRequisitos = await RequisitosService.VerificarSiCumpleRequisitos(user.Id, paisSeleccionado);

                if (!cumpleRequisitos && requisitosPais.RequiereVerificacionPreviaCompra)
                {
                    // Si el país requiere verificación previa, redirigir a la página de requisitos
                    NavigationManager.NavigateTo($"/numeros/requisitos/{paisSeleccionado}");
                    return;
                }

                // Si tiene requisitos pero no requiere verificación previa,
                // mostrar un aviso y un botón para completar la documentación
                if (!cumpleRequisitos)
                {
                    await JSRuntime.InvokeVoidAsync("mostrarAvisoRequisitos", paisSeleccionado);
                }
            }
        }


        // Continuar con el flujo normal
        await CargarNumeros();
    }

    private async Task SeleccionarNumero(TwilioNumeroDisponible numero)
    {
        try
        {
            Logger.LogInformation($"Seleccionando número {numero.Number}");
            
            numeroSeleccionado = numero;
            
            // Obtener costo con margen
            var costos = await TelefonicaService.ObtenerCostos(numeroSeleccionado.Number);
            costoNumero = costos.CostoNumero;
            costoSMS = costos.CostoSMS;
            
            Logger.LogInformation($"Costos calculados: Número=${costoNumero}, SMS=${costoSMS}");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error al seleccionar número {numero.Number}");
            await JSRuntime.InvokeVoidAsync("alert", $"Error al obtener costos: {ex.Message}");
        }
    }

    // Actualiza el método ComprarNumero en Comprar.razor

    private async Task ComprarNumero()
    {
        if (user == null || numeroSeleccionado == null)
        {
            Logger.LogWarning("Intento de compra sin usuario o número seleccionado");
            return;
        }

        // Validar número de redirección
        if (string.IsNullOrWhiteSpace(numeroRedireccion))
        {
            errorRedireccion = "El número de redirección es obligatorio";
            return;
        }

        if (!numeroRedireccion.StartsWith("+"))
        {
            errorRedireccion = "El número debe incluir el código de país (ej. +52)";
            return;
        }

        errorRedireccion = "";
        cargandoCompra = true;

        try
        {
            Logger.LogInformation($"Iniciando compra de número {numeroSeleccionado.Number} para usuario {user.Id}");

            // Usando el nuevo método IniciarCompraNumero que prepara la compra pero no la completa
            var (numeroId, stripeSessionId, error) = await TelefonicaService.IniciarCompraNumero(
                user,
                numeroSeleccionado.Number,
                numeroRedireccion,
                habilitarSMS);

            if (!string.IsNullOrEmpty(error))
            {
                Logger.LogError($"Error al iniciar compra: {error}");
                await JSRuntime.InvokeVoidAsync("alert", $"Error: {error}");
                return;
            }

            if (numeroId.HasValue && !string.IsNullOrEmpty(stripeSessionId))
            {
                Logger.LogInformation($"Compra iniciada correctamente. NumeroId: {numeroId}, SessionId: {stripeSessionId}");

                // Guardar el ID del número en la sesión para recuperarlo en la página de éxito
                await SessionStorage.SetAsync("NumeroId", numeroId.Value);

                // AQUÍ ESTÁ EL CAMBIO: Usa la instancia inyectada de StripeService
                string? checkoutUrl = await StripeService.ObtenerURLPago(stripeSessionId);

                if (!string.IsNullOrEmpty(checkoutUrl))
                {
                    NavigationManager.NavigateTo(checkoutUrl);
                    return;
                }
                else
                {
                    Logger.LogError($"No se pudo obtener URL de checkout para sesión {stripeSessionId}");
                    await JSRuntime.InvokeVoidAsync("alert", "Error al obtener la página de pago. Intenta nuevamente.");
                }
            }
            else
            {
                Logger.LogError("No se recibió ID de número o sesión válidos");
                await JSRuntime.InvokeVoidAsync("alert", "Error al procesar la compra. Intenta nuevamente.");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error durante el proceso de compra");
            await JSRuntime.InvokeVoidAsync("alert", $"Ocurrió un error durante la compra: {ex.Message}");
        }
        finally
        {
            cargandoCompra = false;
        }
    }



    private void Regresar()
    {
        NavigationManager.NavigateTo("/dashboard");
    }

    private string GetNombrePais(string? codigoPais)
    {
        if (string.IsNullOrEmpty(codigoPais) || paisesDisponibles == null)
            return codigoPais ?? "Desconocido";
            
        var pais = paisesDisponibles.FirstOrDefault(p => p.Codigo == codigoPais);
        return pais?.Nombre ?? codigoPais;
    }

    private string FormatearNumero(string? numero)
    {
        if (string.IsNullOrEmpty(numero))
            return "";

        // Formato para distintos países
        if (numero.StartsWith("+52") && numero.Length >= 13)
        {
            // Formato México: +52 (XXX) XXX-XXXX
            return $"+52 ({numero.Substring(3, 3)}) {numero.Substring(6, 3)}-{numero.Substring(9)}";
        }
        else if (numero.StartsWith("+1") && numero.Length >= 12)
        {
            // Formato US/Canadá: +1 (XXX) XXX-XXXX
            return $"+1 ({numero.Substring(2, 3)}) {numero.Substring(5, 3)}-{numero.Substring(8)}";
        }
        else if (numero.StartsWith("+"))
        {
            // Formato genérico para otros países
            var codigoPais = numero.Substring(0, numero.IndexOf(' ') > 0 ? numero.IndexOf(' ') : 3);
            var resto = numero.Substring(codigoPais.Length);
            
            // Intentar aplicar formato más legible
            if (resto.Length > 6)
            {
                return $"{codigoPais} {resto.Substring(0, 3)} {resto.Substring(3, 3)} {resto.Substring(6)}";
            }
        }

        return numero; // Si no encaja en ningún formato, retornar tal cual
    }
}