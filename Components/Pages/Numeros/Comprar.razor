@page "/numeros/comprar"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using System.Security.Claims
@using TelefonicaEmpresaria.Models
@using TelefonicaEmpresaria.Services.TelefonicaEmpresarial.Services
@attribute [Authorize]
@inject UserManager<ApplicationUser> UserManager
@inject ITelefonicaService TelefonicaService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<div class="container mx-auto px-4 py-8">
    <div class="flex items-center mb-8">
        <button @onclick="Regresar" class="mr-3 text-gray-500 hover:text-gray-700">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
            </svg>
        </button>
        <h1 class="text-3xl font-bold text-gray-800">Comprar Número Telefónico</h1>
    </div>

    <div class="bg-white rounded-lg shadow-md p-6 mb-8">
        <div class="mb-8">
            <h2 class="text-xl font-semibold mb-4">Selecciona un número telefónico</h2>

            @if (cargandoNumeros)
            {
                <div class="flex justify-center py-8">
                    <div class="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
                </div>
            }
            else if (numerosDisponibles == null || !numerosDisponibles.Any())
            {
                <div class="text-center py-8">
                    <p class="text-gray-500 mb-4">No hay números disponibles en este momento.</p>
                    <button @onclick="CargarNumeros" class="px-4 py-2 bg-blue-600 text-white text-sm font-medium rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors">
                        Intentar nuevamente
                    </button>
                </div>
            }
            else
            {
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mb-6">
                    @foreach (var numero in numerosDisponibles)
                    {
                        <div @onclick="() => SeleccionarNumero(numero)"
                             class="@(numeroSeleccionado?.Number == numero.Number ? "bg-blue-50 border-blue-500" : "bg-gray-50 border-gray-200")
                                    border-2 rounded-lg p-4 cursor-pointer hover:bg-blue-50 hover:border-blue-300 transition-colors">
                            <div class="font-bold text-lg mb-2">@FormatearNumero(numero.Number)</div>
                            <div class="text-sm text-gray-600">Costo mensual: $@numero.MonthlyRentalRate.ToString("0.00") MXN</div>
                            <div class="mt-2 flex">
                                @if (numero.Voice)
                                {
                                    <span class="mr-2 px-2 py-1 bg-green-100 text-green-800 text-xs rounded-full">Voz</span>
                                }
                                @if (numero.SMS)
                                {
                                    <span class="px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded-full">SMS</span>
                                }
                            </div>
                        </div>
                    }
                </div>

                <div class="flex justify-between">
                    <button @onclick="CargarNumeros" class="px-4 py-2 text-blue-600 bg-transparent border border-blue-600 text-sm font-medium rounded-lg hover:bg-blue-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors">
                        Cargar más números
                    </button>
                </div>
            }
        </div>

        @if (numeroSeleccionado != null)
        {
            <div class="border-t pt-6">
                <h2 class="text-xl font-semibold mb-4">Configura tu número</h2>
                <div class="mb-6">
                    <label class="block text-sm font-medium text-gray-700 mb-1">Número a redireccionar (ej. tu número personal)</label>
                    <input type="tel" @bind="numeroRedireccion" class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500" placeholder="+52 1 123 456 7890" />
                    @if (!string.IsNullOrEmpty(errorRedireccion))
                    {
                        <p class="mt-1 text-sm text-red-600">@errorRedireccion</p>
                    }
                </div>

                <div class="mb-6">
                    <div class="flex items-center">
                        <input id="sms-check" type="checkbox" @bind="habilitarSMS" class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded" />
                        <label for="sms-check" class="ml-2 block text-sm text-gray-700">
                            Habilitar recepción de SMS (para autenticación y verificación)
                        </label>
                    </div>
                    @if (habilitarSMS)
                    {
                        <p class="mt-1 text-sm text-gray-500">Cargo adicional mensual: $@costoSMS.ToString("0.00") MXN</p>
                    }
                </div>

                <div class="bg-gray-50 border border-gray-200 rounded-lg p-4 mb-6">
                    <h3 class="font-semibold text-lg mb-2">Resumen de compra</h3>
                    <div class="flex justify-between mb-2">
                        <span>Número telefónico:</span>
                        <span class="font-medium">@FormatearNumero(numeroSeleccionado.Number)</span>
                    </div>
                    <div class="flex justify-between mb-2">
                        <span>Costo mensual base:</span>
                        <span>$@costoNumero.ToString("0.00") MXN</span>
                    </div>
                    @if (habilitarSMS)
                    {
                        <div class="flex justify-between mb-2">
                            <span>Costo mensual SMS:</span>
                            <span>$@costoSMS.ToString("0.00") MXN</span>
                        </div>
                    }
                    <div class="border-t border-gray-300 my-2"></div>
                    <div class="flex justify-between font-bold">
                        <span>Total mensual:</span>
                        <span>$@(habilitarSMS ? (costoNumero + costoSMS).ToString("0.00") : costoNumero.ToString("0.00")) MXN</span>
                    </div>
                </div>

                <div class="mt-6 flex items-center">
                    <button @onclick="ComprarNumero"
                            class="w-full px-6 py-3 bg-blue-600 text-white font-medium rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                            disabled="@cargandoCompra">
                        @if (cargandoCompra)
                        {
                            <span class="inline-flex items-center">
                                <svg class="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                    <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                </svg>
                                Procesando...
                            </span>
                        }
                        else
                        {
                            <span>Proceder al pago</span>
                        }
                    </button>
                </div>
            </div>
        }
    </div>
</div>

@code {
    private ApplicationUser? user;
    private List<PlivoNumeroDisponible>? numerosDisponibles;
    private PlivoNumeroDisponible? numeroSeleccionado;
    private string numeroRedireccion = "";
    private bool habilitarSMS;
    private bool cargandoNumeros;
    private bool cargandoCompra;
    private string errorRedireccion = "";
    private decimal costoNumero;
    private decimal costoSMS;

    [Inject]
    private AuthenticationStateProvider AuthStateProvider { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        // Obtener el usuario actual a través del AuthenticationStateProvider
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var userId = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;

        if (!string.IsNullOrEmpty(userId))
        {
            user = await UserManager.FindByIdAsync(userId);
        }

        await CargarNumeros();
    }
    private async Task CargarNumeros()
    {
        cargandoNumeros = true;
        try
        {
            numerosDisponibles = await TelefonicaService.ObtenerNumerosDisponibles("mx", 12);
        }
        finally
        {
            cargandoNumeros = false;
        }
    }

    private async Task SeleccionarNumero(PlivoNumeroDisponible numero)
    {
        numeroSeleccionado = numero;

        // Obtener costo con margen
        var costos = await TelefonicaService.ObtenerCostos(numeroSeleccionado.Number);
        costoNumero = costos.CostoNumero;
        costoSMS = costos.CostoSMS;
    }

    private async Task ComprarNumero()
    {
        if (user == null || numeroSeleccionado == null)
        {
            return;
        }

        // Validar número de redirección
        if (string.IsNullOrWhiteSpace(numeroRedireccion))
        {
            errorRedireccion = "El número de redirección es obligatorio";
            return;
        }

        if (!numeroRedireccion.StartsWith("+"))
        {
            errorRedireccion = "El número debe incluir el código de país (ej. +52)";
            return;
        }

        errorRedireccion = "";
        cargandoCompra = true;

        try
        {
            var (numero, error) = await TelefonicaService.ComprarNumero(
                user,
                numeroSeleccionado.Number,
                numeroRedireccion,
                habilitarSMS);

            if (numero != null)
            {
                // Redirigir a la página de éxito o checkout de Stripe
                NavigationManager.NavigateTo("/dashboard");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Error al comprar el número: {error}");
            }
        }
        finally
        {
            cargandoCompra = false;
        }
    }

    private void Regresar()
    {
        NavigationManager.NavigateTo("/dashboard");
    }

    private string FormatearNumero(string? numero)
    {
        if (string.IsNullOrEmpty(numero))
            return "";

        // Formato simple para números mexicanos: +52 (XXX) XXX-XXXX
        if (numero.StartsWith("+52") && numero.Length >= 13)
        {
            return $"+52 ({numero.Substring(3, 3)}) {numero.Substring(6, 3)}-{numero.Substring(9)}";
        }

        return numero;
    }
}