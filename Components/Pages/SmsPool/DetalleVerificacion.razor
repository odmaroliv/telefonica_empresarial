@page "/verificaciones/detalle/{NumeroId:int}"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using System.Security.Claims
@using TelefonicaEmpresaria.Models
@using TelefonicaEmpresarial.Services
@attribute [Authorize]
@inject UserManager<ApplicationUser> UserManager
@inject ISMSPoolService SMSPoolService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject ILogger<DetalleVerificacion> Logger
@inject INotificationService NotificationService

<div class="container mx-auto px-4 py-8">
    <div class="flex items-center mb-8">
        <button @onclick="Regresar" class="mr-3 text-gray-500 hover:text-gray-700">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
            </svg>
        </button>
        <h1 class="text-3xl font-bold text-gray-800">Detalle de Verificación</h1>
    </div>

    @if (cargando)
    {
        <div class="flex justify-center py-8">
            <div class="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
        </div>
    }
    else if (error != null)
    {
        <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-6" role="alert">
            <strong class="font-bold">Error:</strong>
            <span class="block sm:inline">@error</span>
        </div>
        <button @onclick="CargarDatos" class="mt-4 px-4 py-2 bg-blue-600 text-white text-sm font-medium rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors">
            Intentar nuevamente
        </button>
    }
    else if (numero == null)
    {
        <div class="bg-yellow-100 border border-yellow-400 text-yellow-700 px-4 py-3 rounded relative mb-6" role="alert">
            <strong class="font-bold">No encontrado:</strong>
            <span class="block sm:inline">La verificación solicitada no existe o ha expirado.</span>
        </div>
        <button @onclick="Regresar" class="mt-4 px-4 py-2 bg-blue-600 text-white text-sm font-medium rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors">
            Volver a verificaciones
        </button>
    }
    else
    {
        <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
            <!-- Información principal -->
            <div class="lg:col-span-1">
                <div class="bg-white rounded-lg shadow-md p-6 mb-6">
                    <div class="flex items-center mb-4">
                       
                        <div>
                            <h2 class="text-xl font-semibold text-gray-800">@numero.Servicio?.Nombre</h2>
                            <p class="text-sm text-gray-600">Verificación temporal</p>
                        </div>
                    </div>
                   
                    <div class="space-y-3 mb-6">
                        <div>
                            <span class="text-sm text-gray-500 block">Número</span>
                            <div class="flex items-center mt-1">
                                <span class="font-semibold mr-2">@numero.Numero</span>
                                <button @onclick="() => CopiarAlPortapapeles(numero.Numero)" class="text-blue-600 hover:text-blue-800">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
                                    </svg>
                                </button>
                            </div>
                        </div>

                        <div>
                            <span class="text-sm text-gray-500 block">País</span>
                            <span class="font-semibold">@numero.Pais</span>
                        </div>

                        <div>
                            <span class="text-sm text-gray-500 block">Estado</span>
                            @if (EsExpirado())
                            {
                                <span class="px-2 py-1 inline-flex text-xs leading-5 font-semibold rounded-full bg-red-100 text-red-800">
                                    Expirado
                                </span>
                            }
                            else if (numero.SMSRecibido)
                            {
                                <span class="px-2 py-1 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800">
                                    SMS Recibido
                                </span>
                            }
                            else
                            {
                                <span class="px-2 py-1 inline-flex text-xs leading-5 font-semibold rounded-full bg-blue-100 text-blue-800">
                                    Esperando SMS
                                </span>
                            }
                        </div>

                        @if (!string.IsNullOrEmpty(numero.CodigoRecibido))
                        {
                            <div>
                                <span class="text-sm text-gray-500 block">Código Recibido</span>
                                <div class="flex items-center mt-1">
                                    <span class="font-bold text-lg bg-gray-100 px-3 py-1 rounded mr-2">@numero.CodigoRecibido</span>
                                    <button @onclick="() => CopiarAlPortapapeles(numero.CodigoRecibido)" class="text-blue-600 hover:text-blue-800">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
                                        </svg>
                                    </button>
                                </div>
                            </div>
                        }
                    </div>

                    <div class="space-y-3">
                        <div>
                            <span class="text-sm text-gray-500 block">Comprado el</span>
                            <span class="font-semibold">@numero.FechaCompra.ToLocalTime().ToString("dd/MM/yyyy HH:mm:ss")</span>
                        </div>

                        <div>
                            <span class="text-sm text-gray-500 block">Tiempo restante</span>
                            @if (EsExpirado())
                            {
                                <span class="font-semibold text-red-600">Expirado</span>
                            }
                            else
                            {
                                <span class="font-semibold">@CalcularTiempoRestante()</span>
                                <div class="w-full bg-gray-200 rounded-full h-2 mt-1">
                                    <div class="@(TiempoRestantePorcentaje() < 20 ? "bg-red-500" : "bg-green-500") h-2 rounded-full" style="width: @TiempoRestantePorcentaje()%"></div>
                                </div>
                            }
                        </div>
                    </div>

                    <!-- Botones de acción -->
                    <div class="mt-6 space-y-3">
                        @if (!EsExpirado() && !numero.SMSRecibido)
                        {
                            <button @onclick="() => VerificarSMS()" class="w-full px-4 py-2 bg-blue-600 text-white text-sm font-medium rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors">
                                Verificar SMS
                            </button>
                        }

                        <button @onclick="CancelarVerificacion" class="w-full px-4 py-2 bg-red-600 text-white text-sm font-medium rounded-lg hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 transition-colors">
                            Cancelar Verificación
                        </button>
                    </div>
                </div>

                <!-- Instrucciones -->
                <div class="bg-white rounded-lg shadow-md p-6">
                    <h3 class="text-lg font-semibold mb-3 text-gray-800">Instrucciones</h3>

                    <ol class="list-decimal pl-5 space-y-2 text-sm text-gray-700">
                        <li>Utilice este número en la plataforma @numero.Servicio?.Nombre para recibir el código de verificación.</li>
                        <li>El número estará activo durante aproximadamente 20 minutos.</li>
                        <li>Presione "Verificar SMS" para comprobar si ha recibido un mensaje.</li>
                        <li>Una vez recibido el código, cópielo y úselo en la plataforma.</li>
                    </ol>

                    <div class="mt-4 p-3 bg-yellow-50 rounded text-xs text-yellow-800">
                        <p class="font-semibold">Importante:</p>
                        <p>Si no recibe el SMS en 5-10 minutos, es posible que el servicio haya detectado que es un número temporal. En ese caso, puede cancelar esta verificación y probar con otro servicio.</p>
                    </div>
                </div>
            </div>

            <!-- Mensajes recibidos y ejemplo -->
            <div class="lg:col-span-2">
                <div class="bg-white rounded-lg shadow-md p-6 mb-6">
                    <h3 class="text-lg font-semibold mb-4 text-gray-800">Mensajes Recibidos</h3>

                    @if (verificaciones.Any())
                    {
                        <div class="space-y-4">
                            @foreach (var sms in verificaciones)
                            {
                                <div class="border rounded-lg p-4 bg-gray-50">
                                    <div class="flex justify-between items-start mb-2">
                                        <span class="font-medium text-sm">De: @sms.Remitente</span>
                                        <span class="text-xs text-gray-500">@sms.FechaRecepcion.ToLocalTime().ToString("dd/MM/yyyy HH:mm:ss")</span>
                                    </div>
                                    <p class="text-sm text-gray-700 mb-2">@sms.MensajeCompleto</p>
                                    @if (!string.IsNullOrEmpty(sms.CodigoExtraido))
                                    {
                                        <div class="mt-2 pt-2 border-t border-gray-200">
                                            <span class="text-xs text-gray-500">Código detectado:</span>
                                            <div class="flex items-center mt-1">
                                                <span class="font-bold bg-blue-100 px-2 py-1 rounded mr-2">@sms.CodigoExtraido</span>
                                                <button @onclick="() => CopiarAlPortapapeles(sms.CodigoExtraido)" class="text-blue-600 hover:text-blue-800">
                                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
                                                    </svg>
                                                </button>
                                            </div>
                                        </div>
                                    }
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-6">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 mx-auto text-gray-400 mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
                            </svg>
                            <p class="text-gray-500">No se han recibido mensajes aún</p>
                            @if (!EsExpirado())
                            {
                                <button @onclick="() => VerificarSMS()" class="mt-4 px-4 py-2 bg-blue-600 text-white text-sm font-medium rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors">
                                    Verificar SMS
                                </button>
                            }
                        </div>
                    }
                </div>

                <!-- Ejemplo de mensaje -->
                <div class="bg-white rounded-lg shadow-md p-6">
                    <h3 class="text-lg font-semibold mb-3 text-gray-800">Ejemplo de mensaje de verificación</h3>

                    <div class="border rounded-lg p-4 bg-gray-50">
                        <div class="flex justify-between items-start mb-2">
                            <span class="font-medium text-sm">De: @(numero.Servicio?.Nombre ?? "Servicio")</span>
                            <span class="text-xs text-gray-500">@DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss")</span>
                        </div>
                        <p class="text-sm text-gray-700">
                            Su código de verificación para @(numero.Servicio?.Nombre ?? "el servicio") es: <span class="font-bold">123456</span>. No comparta este código con nadie.
                        </p>
                    </div>

                    <div class="mt-4 text-xs text-gray-500">
                        <p>Este es un ejemplo de cómo podría verse un mensaje de verificación. El formato real puede variar según el servicio.</p>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public int NumeroId { get; set; }

    private ApplicationUser? user;
    private SMSPoolNumero? numero;
    private List<SMSPoolVerificacion> verificaciones = new List<SMSPoolVerificacion>();
    private bool cargando = true;
    private string? error;
    private System.Threading.Timer? timer;

    protected override async Task OnInitializedAsync()
    {
        await CargarDatos();

        // Iniciar timer para actualizar datos cada 10 segundos
        timer = new System.Threading.Timer(async _ =>
        {
            await InvokeAsync(async () =>
            {
                if (!cargando && numero != null && !EsExpirado() && !numero.SMSRecibido)
                {
                    await VerificarSMS(mostrarAlerta: false);
                    await CargarMensajes();
                    StateHasChanged();
                }
            });
        }, null, TimeSpan.Zero, TimeSpan.FromSeconds(10));

    }

    protected override async Task OnParametersSetAsync()
    {
        if (NumeroId > 0 && (numero == null || numero.Id != NumeroId))
        {
            await CargarDatos();
        }
    }

    public void Dispose()
    {
        timer?.Dispose();
    }

    private async Task CargarDatos()
    {
        try
        {
            cargando = true;
            error = null;
            numero = await SMSPoolService.ObtenerNumeroPorId(NumeroId);

            if (numero != null && numero.Estado == "Pendiente")
            {
                // Intentar resolver el estado pendiente
                await SMSPoolService.ResolverNumerosPendientes(numero.UserId);

                // Volver a cargar el número por si ha cambiado
                numero = await SMSPoolService.ObtenerNumeroPorId(NumeroId);
            }

            // Obtener usuario actual
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            user = await UserManager.GetUserAsync(authState.User);

            if (user == null)
            {
                error = "No se pudo obtener información del usuario";
                return;
            }

            // Obtener todos los números del usuario
            var numeros = await SMSPoolService.ObtenerNumerosPorUsuario(user.Id);

            // Buscar el número específico
            numero = numeros.FirstOrDefault(n => n.Id == NumeroId);

            if (numero == null)
            {
                error = "Número no encontrado";
                return;
            }

            // Cargar verificaciones (mensajes SMS)
            await CargarMensajes();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error al cargar datos para verificación {NumeroId}");
            error = "Ocurrió un error al cargar la información. Por favor, intente nuevamente.";
        }
        finally
        {
            cargando = false;
        }
    }

    private async Task CargarMensajes()
    {
        if (numero == null) return;

        try
        {
            verificaciones = await SMSPoolService.ObtenerVerificacionesPorNumero(numero.Id);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error al cargar mensajes para verificación {NumeroId}");
            // No mostrar error para no interrumpir la UI
        }
    }

    private async Task VerificarSMS(bool mostrarAlerta = true)
    {
        if (numero == null) return;

        try
        {
            bool hayMensaje = await SMSPoolService.VerificarNuevosMensajes(numero.Id);

            // Recargar datos
            await CargarDatos();

            if (hayMensaje)
            {
                // Notificar al usuario
                // await NotificationService.EnviarNotificacion(
                //     "SMS recibido",
                //     "Se ha recibido un nuevo SMS con su código de verificación.",
                //     "success");
            }
            else if (mostrarAlerta)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Aún no se ha recibido ningún SMS. Por favor, espere unos momentos e intente nuevamente.");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error al verificar SMS para número {numero.Id}");
            if (mostrarAlerta)
            {
                await JSRuntime.InvokeVoidAsync("alert", "No se pudo verificar la recepción de SMS. Por favor, intente nuevamente.");
            }
        }
    }

    private async Task CancelarVerificacion()
    {
        if (numero == null) return;

        try
        {
            bool confirmar = await JSRuntime.InvokeAsync<bool>("confirm", "¿Está seguro de que desea cancelar esta verificación? Esta acción no puede deshacerse y no reembolsará los creditos.");

            if (!confirmar) return;

            bool resultado = await SMSPoolService.CancelarNumero(numero.Id);

            if (resultado)
            {
                // await NotificationService.EnviarNotificacion(
                //     "Verificación cancelada",
                //     "La verificación ha sido cancelada correctamente.",
                //     "success");

                NavigationManager.NavigateTo("/verificaciones");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "No se pudo cancelar la verificación. Por favor, intente nuevamente.");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error al cancelar verificación {numero.Id}");
            await JSRuntime.InvokeVoidAsync("alert", "Ocurrió un error al cancelar la verificación. Por favor, intente nuevamente.");
        }
    }

    private async Task CopiarAlPortapapeles(string texto)
    {
        await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", texto);
        // await NotificationService.EnviarNotificacion(
        //     "Copiado",
        //     "El texto ha sido copiado al portapapeles.",
        //     "success");
    }

    private bool EsExpirado()
    {
        if (numero == null) return true;

        if (numero.Estado == "Expirado" || numero.Estado == "Cancelado")
        {
            return true;
        }

        return numero.FechaExpiracion < DateTime.UtcNow;
    }

    private string CalcularTiempoRestante()
    {
        if (numero == null) return "0";

        var tiempoRestante = numero.FechaExpiracion - DateTime.UtcNow;

        if (tiempoRestante.TotalSeconds <= 0)
        {
            return "Expirado";
        }

        if (tiempoRestante.TotalMinutes < 1)
        {
            return $"{tiempoRestante.Seconds} segundos";
        }

        return $"{(int)tiempoRestante.TotalMinutes} minutos y {tiempoRestante.Seconds} segundos";
    }

    private int TiempoRestantePorcentaje()
    {
        if (numero == null) return 0;

        var tiempoTotal = (numero.FechaExpiracion - numero.FechaCompra).TotalSeconds;
        var tiempoRestante = (numero.FechaExpiracion - DateTime.UtcNow).TotalSeconds;

        if (tiempoRestante <= 0 || tiempoTotal <= 0)
        {
            return 0;
        }

        int porcentaje = (int)Math.Round((tiempoRestante / tiempoTotal) * 100);

        return Math.Max(0, Math.Min(100, porcentaje));
    }

    private void Regresar()
    {
        NavigationManager.NavigateTo("/verificaciones");
    }

    [Inject]
    private AuthenticationStateProvider AuthenticationStateProvider { get; set; } = default!;
}